{
  "language": "Solidity",
  "sources": {
    "contracts/farm-stake/SmartFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\ncontract SmartFarm is Ownable, ReentrancyGuard {\r\n  using SafeERC20 for IERC20Metadata;\r\n\r\n  // The address of the smart farm factory\r\n  address public SMART_FARM_FACTORY;\r\n\r\n  // Whether a limit is set for users\r\n  bool public hasUserLimit;\r\n\r\n  // Whether it is initialized\r\n  bool public isInitialized;\r\n\r\n  // Accrued token per share\r\n  uint256 public accTokenPerShare;\r\n\r\n  // The block number when REWARD mining ends.\r\n  uint256 public bonusEndBlock;\r\n\r\n  // The block number when REWARD mining starts.\r\n  uint256 public startBlock;\r\n\r\n  // The block number of the last pool update\r\n  uint256 public lastRewardBlock;\r\n\r\n  // The pool limit (0 if none)\r\n  uint256 public poolLimitPerUser;\r\n\r\n  // REWARD tokens created per block.\r\n  uint256 public rewardPerBlock;\r\n\r\n  // The precision factor\r\n  uint256 public PRECISION_FACTOR;\r\n\r\n  // The reward token\r\n  IERC20Metadata public rewardToken;\r\n\r\n  // The staked token\r\n  IERC20Metadata public stakedToken;\r\n\r\n  // Info of each user that stakes tokens (stakedToken)\r\n  mapping(address => UserInfo) public userInfo;\r\n\r\n  struct UserInfo {\r\n    uint256 amount; // How many staked tokens the user has provided\r\n    uint256 rewardDebt; // Reward debt\r\n  }\r\n\r\n  event AdminTokenRecovery(address tokenRecovered, uint256 amount);\r\n  event Deposit(address indexed user, uint256 amount);\r\n  event EmergencyWithdraw(address indexed user, uint256 amount);\r\n  event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\r\n  event NewRewardPerBlock(uint256 rewardPerBlock);\r\n  event NewPoolLimit(uint256 poolLimitPerUser);\r\n  event RewardsStop(uint256 blockNumber);\r\n  event Withdraw(address indexed user, uint256 amount);\r\n\r\n  constructor() public {\r\n    SMART_FARM_FACTORY = msg.sender;\r\n  }\r\n\r\n  /*\r\n   * @notice Initialize the contract\r\n   * @param _stakedToken: staked token address\r\n   * @param _rewardToken: reward token address\r\n   * @param _rewardPerBlock: reward per block (in rewardToken)\r\n   * @param _startBlock: start block\r\n   * @param _bonusEndBlock: end block\r\n   * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\r\n   * @param _admin: admin address with ownership\r\n   */\r\n  function initialize(\r\n    IERC20Metadata _stakedToken,\r\n    IERC20Metadata _rewardToken,\r\n    uint256 _rewardPerBlock,\r\n    uint256 _startBlock,\r\n    uint256 _bonusEndBlock,\r\n    uint256 _poolLimitPerUser,\r\n    address _admin\r\n  ) external {\r\n    require(!isInitialized, \"Already initialized\");\r\n    require(msg.sender == SMART_FARM_FACTORY, \"Not factory\");\r\n\r\n    // Make this contract initialized\r\n    isInitialized = true;\r\n\r\n    stakedToken = _stakedToken;\r\n    rewardToken = _rewardToken;\r\n    rewardPerBlock = _rewardPerBlock;\r\n    startBlock = _startBlock;\r\n    bonusEndBlock = _bonusEndBlock;\r\n\r\n    if (_poolLimitPerUser > 0) {\r\n      hasUserLimit = true;\r\n      poolLimitPerUser = _poolLimitPerUser;\r\n    }\r\n\r\n    uint256 decimalsRewardToken = uint256(rewardToken.decimals());\r\n    require(decimalsRewardToken < 30, \"Must be inferior to 30\");\r\n\r\n    PRECISION_FACTOR = uint256(10**(uint256(30) - (decimalsRewardToken)));\r\n\r\n    // Set the lastRewardBlock as the startBlock\r\n    lastRewardBlock = startBlock;\r\n\r\n    // Transfer ownership to the admin address who becomes owner of the contract\r\n    transferOwnership(_admin);\r\n  }\r\n\r\n  /*\r\n   * @notice Deposit staked tokens and collect reward tokens (if any)\r\n   * @param _amount: amount to withdraw (in rewardToken)\r\n   */\r\n  function deposit(uint256 _amount) external nonReentrant {\r\n    UserInfo storage user = userInfo[msg.sender];\r\n\r\n    if (hasUserLimit) {\r\n      require(_amount + user.amount <= poolLimitPerUser, \"User amount above limit\");\r\n    }\r\n\r\n    _updatePool();\r\n\r\n    if (user.amount > 0) {\r\n      uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\r\n      if (pending > 0) {\r\n        rewardToken.safeTransfer(address(msg.sender), pending);\r\n      }\r\n    }\r\n\r\n    if (_amount > 0) {\r\n      user.amount = user.amount + _amount;\r\n      stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n    }\r\n\r\n    user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n    emit Deposit(msg.sender, _amount);\r\n  }\r\n\r\n  /*\r\n   * @notice Withdraw staked tokens and collect reward tokens\r\n   * @param _amount: amount to withdraw (in rewardToken)\r\n   */\r\n  function withdraw(uint256 _amount) external nonReentrant {\r\n    UserInfo storage user = userInfo[msg.sender];\r\n    require(user.amount >= _amount, \"Amount to withdraw too high\");\r\n\r\n    _updatePool();\r\n\r\n    uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\r\n\r\n    if (_amount > 0) {\r\n      user.amount = user.amount - _amount;\r\n      stakedToken.safeTransfer(address(msg.sender), _amount);\r\n    }\r\n\r\n    if (pending > 0) {\r\n      rewardToken.safeTransfer(address(msg.sender), pending);\r\n    }\r\n\r\n    user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n    emit Withdraw(msg.sender, _amount);\r\n  }\r\n\r\n  /*\r\n   * @notice Withdraw staked tokens without caring about rewards rewards\r\n   * @dev Needs to be for emergency.\r\n   */\r\n  function emergencyWithdraw() external nonReentrant {\r\n    UserInfo storage user = userInfo[msg.sender];\r\n    uint256 amountToTransfer = user.amount;\r\n    user.amount = 0;\r\n    user.rewardDebt = 0;\r\n\r\n    if (amountToTransfer > 0) {\r\n      stakedToken.safeTransfer(address(msg.sender), amountToTransfer);\r\n    }\r\n\r\n    emit EmergencyWithdraw(msg.sender, user.amount);\r\n  }\r\n\r\n  /*\r\n   * @notice Stop rewards\r\n   * @dev Only callable by owner. Needs to be for emergency.\r\n   */\r\n  function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\r\n    rewardToken.safeTransfer(address(msg.sender), _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice It allows the admin to recover wrong tokens sent to the contract\r\n   * @param _tokenAddress: the address of the token to withdraw\r\n   * @param _tokenAmount: the number of tokens to withdraw\r\n   * @dev This function is only callable by admin.\r\n   */\r\n  function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n    require(_tokenAddress != address(stakedToken), \"Cannot be staked token\");\r\n    require(_tokenAddress != address(rewardToken), \"Cannot be reward token\");\r\n\r\n    IERC20Metadata(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\r\n\r\n    emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\r\n  }\r\n\r\n  /*\r\n   * @notice Stop rewards\r\n   * @dev Only callable by owner\r\n   */\r\n  function stopReward() external onlyOwner {\r\n    bonusEndBlock = block.number;\r\n  }\r\n\r\n  /*\r\n   * @notice Update pool limit per user\r\n   * @dev Only callable by owner.\r\n   * @param _hasUserLimit: whether the limit remains forced\r\n   * @param _poolLimitPerUser: new pool limit per user\r\n   */\r\n  function updatePoolLimitPerUser(bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {\r\n    require(hasUserLimit, \"Must be set\");\r\n    if (_hasUserLimit) {\r\n      require(_poolLimitPerUser > poolLimitPerUser, \"New limit must be higher\");\r\n      poolLimitPerUser = _poolLimitPerUser;\r\n    } else {\r\n      hasUserLimit = _hasUserLimit;\r\n      poolLimitPerUser = 0;\r\n    }\r\n    emit NewPoolLimit(poolLimitPerUser);\r\n  }\r\n\r\n  /*\r\n   * @notice Update reward per block\r\n   * @dev Only callable by owner.\r\n   * @param _rewardPerBlock: the reward per block\r\n   */\r\n  function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\r\n    require(block.number < startBlock, \"Pool has started\");\r\n    rewardPerBlock = _rewardPerBlock;\r\n    emit NewRewardPerBlock(_rewardPerBlock);\r\n  }\r\n\r\n  /**\r\n   * @notice It allows the admin to update start and end blocks\r\n   * @dev This function is only callable by owner.\r\n   * @param _startBlock: the new start block\r\n   * @param _bonusEndBlock: the new end block\r\n   */\r\n  function updateStartAndEndBlocks(uint256 _startBlock, uint256 _bonusEndBlock) external onlyOwner {\r\n    require(block.number < startBlock, \"Pool has started\");\r\n    require(_startBlock < _bonusEndBlock, \"New startBlock must be lower than new endBlock\");\r\n    require(block.number < _startBlock, \"New startBlock must be higher than current block\");\r\n\r\n    startBlock = _startBlock;\r\n    bonusEndBlock = _bonusEndBlock;\r\n\r\n    // Set the lastRewardBlock as the startBlock\r\n    lastRewardBlock = startBlock;\r\n\r\n    emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\r\n  }\r\n\r\n  /*\r\n   * @notice View function to see pending reward on frontend.\r\n   * @param _user: user address\r\n   * @return Pending reward for a given user\r\n   */\r\n  function pendingReward(address _user) external view returns (uint256) {\r\n    UserInfo storage user = userInfo[_user];\r\n    uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n    if (block.number > lastRewardBlock && stakedTokenSupply != 0) {\r\n      uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n      uint256 tknReward = multiplier * rewardPerBlock;\r\n      uint256 adjustedTokenPerShare = accTokenPerShare + (tknReward * PRECISION_FACTOR) / stakedTokenSupply;\r\n      return (user.amount * adjustedTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\r\n    } else {\r\n      return (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\r\n    }\r\n  }\r\n\r\n  /*\r\n   * @notice Update reward variables of the given pool to be up-to-date.\r\n   */\r\n  function _updatePool() internal {\r\n    if (block.number <= lastRewardBlock) {\r\n      return;\r\n    }\r\n\r\n    uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n\r\n    if (stakedTokenSupply == 0) {\r\n      lastRewardBlock = block.number;\r\n      return;\r\n    }\r\n\r\n    uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n    uint256 cakeReward = multiplier * rewardPerBlock;\r\n    accTokenPerShare = accTokenPerShare + (cakeReward * PRECISION_FACTOR) / stakedTokenSupply;\r\n    lastRewardBlock = block.number;\r\n  }\r\n\r\n  /*\r\n   * @notice Return reward multiplier over the given _from to _to block.\r\n   * @param _from: block to start\r\n   * @param _to: block to finish\r\n   */\r\n  function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\r\n    if (_to <= bonusEndBlock) {\r\n      return _to - _from;\r\n    } else if (_from >= bonusEndBlock) {\r\n      return 0;\r\n    } else {\r\n      return bonusEndBlock - _from;\r\n    }\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/farm-stake/SmartFarmFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\nimport \"./SmartFarm.sol\";\r\n\r\ncontract SmartFarmFactory is Ownable {\r\n  event NewSmartFarmContract(address indexed smartFarm);\r\n\r\n  constructor() public {\r\n    //\r\n  }\r\n\r\n  /*\r\n   * @notice Deploy the pool\r\n   * @param _stakedToken: staked token address\r\n   * @param _rewardToken: reward token address\r\n   * @param _rewardPerBlock: reward per block (in rewardToken)\r\n   * @param _startBlock: start block\r\n   * @param _endBlock: end block\r\n   * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\r\n   * @param _admin: admin address with ownership\r\n   * @return address of new smart chef contract\r\n   */\r\n  function deployPool(\r\n    IERC20Metadata _stakedToken,\r\n    IERC20Metadata _rewardToken,\r\n    uint256 _rewardPerBlock,\r\n    uint256 _startBlock,\r\n    uint256 _bonusEndBlock,\r\n    uint256 _poolLimitPerUser,\r\n    address _admin\r\n  ) external onlyOwner {\r\n    require(_stakedToken.totalSupply() >= 0);\r\n    require(_rewardToken.totalSupply() >= 0);\r\n    require(_stakedToken != _rewardToken, \"Tokens must be be different\");\r\n\r\n    bytes memory bytecode = type(SmartFarm).creationCode;\r\n    bytes32 salt = keccak256(abi.encodePacked(_stakedToken, _rewardToken, _startBlock));\r\n    address smartFarmAddress;\r\n\r\n    assembly {\r\n      smartFarmAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n    }\r\n\r\n    SmartFarm(smartFarmAddress).initialize(\r\n      _stakedToken,\r\n      _rewardToken,\r\n      _rewardPerBlock,\r\n      _startBlock,\r\n      _bonusEndBlock,\r\n      _poolLimitPerUser,\r\n      _admin\r\n    );\r\n\r\n    emit NewSmartFarmContract(smartFarmAddress);\r\n  }\r\n}\r\n"
    },
    "contracts/mock/rba/token/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string internal _name;\n    string internal _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/mock/rba/token/DividendPayingToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './ERC20.sol';\nimport './interfaces/IDividendPayingTokenInterface.sol';\nimport './interfaces/IDividendPayingTokenOptionalInterface.sol';\n\nabstract contract DividendPayingToken is\n    Ownable,\n    ERC20,\n    IDividendPayingTokenInterface,\n    IDividendPayingTokenOptionalInterface\n{\n    address public immutable override dividendToken;\n\n    uint256 internal constant magnitude = 2**128;\n\n    uint256 internal magnifiedDividendPerShare;\n\n    mapping(address => int256) internal magnifiedDividendCorrections;\n    mapping(address => uint256) internal withdrawnDividends;\n\n    uint256 public override totalDividendsDistributed;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _dividendToken\n    ) ERC20(_name, _symbol) {\n        dividendToken = _dividendToken;\n    }\n\n    function distributeDividends(uint256 amount) public virtual override onlyOwner {\n        require(totalSupply() > 0, 'DividendPayingToken: Total Supply must be > 0');\n\n        if (amount > 0) {\n            magnifiedDividendPerShare = magnifiedDividendPerShare + ((amount * magnitude) / totalSupply());\n            emit DividendsDistributed(msg.sender, amount);\n\n            totalDividendsDistributed = totalDividendsDistributed + amount;\n        }\n    }\n\n    function withdrawDividend() public virtual override {\n        _withdrawDividendOfUser(payable(msg.sender));\n    }\n\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\n        if (_withdrawableDividend > 0) {\n            withdrawnDividends[user] = withdrawnDividends[user] + _withdrawableDividend;\n            emit DividendWithdrawn(user, _withdrawableDividend);\n            bool success = IERC20(dividendToken).transfer(user, _withdrawableDividend);\n\n            if (!success) {\n                withdrawnDividends[user] = withdrawnDividends[user] - _withdrawableDividend;\n                return 0;\n            }\n\n            return _withdrawableDividend;\n        }\n\n        return 0;\n    }\n\n    function dividendOf(address _owner) public view override returns (uint256) {\n        return withdrawableDividendOf(_owner);\n    }\n\n    function withdrawableDividendOf(address _owner) public view override returns (uint256) {\n        return accumulativeDividendOf(_owner) - withdrawnDividends[_owner];\n    }\n\n    function withdrawnDividendOf(address _owner) public view override returns (uint256) {\n        return withdrawnDividends[_owner];\n    }\n\n    function accumulativeDividendOf(address _owner) public view override returns (uint256) {\n        return\n            uint256(int256((magnifiedDividendPerShare * balanceOf(_owner))) + \n            magnifiedDividendCorrections[_owner]) /\n            magnitude;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal virtual override {\n        require(false);\n\n        int256 _magCorrection = int256(magnifiedDividendPerShare * value);\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from] + _magCorrection;\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to] - _magCorrection;\n    }\n\n    function _mint(address account, uint256 value) internal override {\n        super._mint(account, value);\n\n        magnifiedDividendCorrections[account] =\n            magnifiedDividendCorrections[account] -\n            int256(magnifiedDividendPerShare * value);\n    }\n\n    function _burn(address account, uint256 value) internal override {\n        super._burn(account, value);\n\n        magnifiedDividendCorrections[account] =\n            magnifiedDividendCorrections[account] +\n            int256(magnifiedDividendPerShare * value);\n    }\n\n    function _setBalance(address account, uint256 newBalance) internal {\n        uint256 currentBalance = balanceOf(account);\n\n        if (newBalance > currentBalance) {\n            uint256 mintAmount = newBalance - currentBalance;\n            _mint(account, mintAmount);\n        } else if (newBalance < currentBalance) {\n            uint256 burnAmount = currentBalance - newBalance;\n            _burn(account, burnAmount);\n        }\n    }\n}\n"
    },
    "contracts/mock/rba/token/interfaces/IDividendPayingTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDividendPayingTokenInterface {\n    function dividendToken() external view returns(address);\n\n    function totalDividendsDistributed() external view returns(uint256);\n\n    /**\n     * @notice View the amount of dividend in wei that an address can withdraw.\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` can withdraw.\n     */\n    function dividendOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice Withdraws the ether distributed to the sender.\n     * @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` \n     *      SHOULD be 0 after the transfer.\n     *      MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\n     */\n    function withdrawDividend() external;\n\n    function distributeDividends(uint256 amount) external;\n\n    /**\n     * @dev This event MUST emit when ether is distributed to token holders.\n     * @param from The address which sends ether to this contract.\n     * @param weiAmount The amount of distributed ether in wei.\n     */\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\n\n    /**\n     * @dev This event MUST emit when an address withdraws their dividend.\n     * @param to The address which withdraws ether from this contract.\n     * @param weiAmount The amount of withdrawn ether in wei.\n     */\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\n}\n"
    },
    "contracts/mock/rba/token/interfaces/IDividendPayingTokenOptionalInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDividendPayingTokenOptionalInterface {\n    /**\n     * @notice View the amount of dividend in wei that an address can withdraw.\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` can withdraw.\n     */\n    function withdrawableDividendOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice View the amount of dividend in wei that an address has withdrawn.\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` has withdrawn.\n     */\n    function withdrawnDividendOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice View the amount of dividend in wei that an address has earned in total.\n     * @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` has earned in total.\n     */\n    function accumulativeDividendOf(address _owner) external view returns (uint256);\n}\n"
    },
    "contracts/mock/rba/IRoburnaDividendTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./token/interfaces/IBEP20.sol\";\nimport \"./token/interfaces/IDividendPayingTokenInterface.sol\";\nimport \"./token/interfaces/IDividendPayingTokenOptionalInterface.sol\";\nimport \"./token/interfaces/IERC20TokenRecover.sol\";\n\n\ninterface IRoburnaDividendTracker is\n    IBEP20,\n    IDividendPayingTokenInterface,\n    IDividendPayingTokenOptionalInterface,\n    IERC20TokenRecover\n{\n    function lastProcessedIndex() external view returns (uint256);\n\n    function excludedFromDividends(address account) external view returns (bool);\n\n    function lastClaimTimes(address account) external view returns (uint256);\n\n    function deployer() external view returns (address);\n\n    function claimWait() external view returns (uint256);\n\n    function minimumTokenBalanceForDividends() external view returns (uint256);\n\n    event ExcludeFromDividends(address indexed account);\n    event IncludedInDividends(address indexed account);\n\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\n\n    function excludeFromDividends(address account) external;\n\n    function includeInDividends(address account) external;\n\n    function updateClaimWait(uint256 newClaimWait) external;\n\n    function updateMinTokenBalance(uint256 minTokens) external;\n\n    function getLastProcessedIndex() external view returns (uint256);\n\n    function getNumberOfTokenHolders() external view returns (uint256);\n\n    function getAccount(address _account)\n        external\n        view\n        returns (\n            address account,\n            int256 index,\n            int256 iterationsUntilProcessed,\n            uint256 withdrawableDividends,\n            uint256 totalDividends,\n            uint256 lastClaimTime,\n            uint256 nextClaimTime,\n            uint256 secondsUntilAutoClaimAvailable\n        );\n\n    function getAccountAtIndex(uint256 index)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function ensureBalance(bool _process) external;\n\n    function ensureBalanceForUsers(address payable[] memory accounts, bool _process) external;\n\n    function ensureBalanceForUser(address payable account, bool _process) external;\n\n    function setBalance(address payable account, uint256 newBalance) external;\n\n    function process(uint256 gas)\n        external\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function processAccount(address payable account, bool automatic) external returns (bool);\n}\n"
    },
    "contracts/mock/rba/token/interfaces/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IBEP20 is IERC20, IERC20Metadata {\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n}\n"
    },
    "contracts/mock/rba/token/interfaces/IERC20TokenRecover.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC20TokenRecover\n * @dev Allows owner to recover any ERC20 or ETH sent into the contract\n * based on https://github.com/vittominacori/eth-token-recover by Vittorio Minacori\n */\ninterface IERC20TokenRecover {\n    /**\n     * @notice function that transfers an token amount from this contract to the owner when accidentally sent\n     * @param tokenAddress The token contract address\n     * @param tokenAmount Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\n\n    /**\n     * @notice function that transfers an eth amount from this contract to the owner when accidentally sent\n     * @param amount Number of eth to be sent\n     */\n    function recoverETH(uint256 amount) external;\n}\n"
    },
    "contracts/mock/rba/RoburnaDividendTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./libraries/IterableMapping.sol\";\nimport \"./token/DividendPayingToken.sol\";\nimport \"./token/extensions/ERC20TokenRecover.sol\";\nimport \"./IRoburnaDividendTracker.sol\";\n\ncontract RoburnaDividendTracker is Ownable, DividendPayingToken, ERC20TokenRecover, IRoburnaDividendTracker {\n    using IterableMapping for IterableMapping.Map;\n\n    address public parentToken;\n\n    IterableMapping.Map private tokenHoldersMap;\n    uint256 public override lastProcessedIndex;\n\n    mapping(address => bool) public override excludedFromDividends;\n\n    mapping(address => uint256) public override lastClaimTimes;\n\n    address public override deployer;\n\n    uint256 public override claimWait;\n    uint256 public override minimumTokenBalanceForDividends;\n\n    event LogUpdateDeployerAddress(address newDeployer);\n    event LogUpdateMinTokenBalance(uint256 newMinTokens);\n\n    /**\n     * @dev Throws if called by any account other than the owner or deployer.\n     */\n    modifier onlyOwnerOrDeployer() {\n        require(owner() == _msgSender() || deployer == _msgSender(), \"Ownable: caller is not the owner or deployer\");\n        _;\n    }\n\n    constructor(address dividendToken, address _parentToken)\n        DividendPayingToken(\"Roburna Dividend Tracker\", \"RBADT\", dividendToken)\n    {\n        claimWait = 3600;\n        minimumTokenBalanceForDividends = 10 * (10**3) * (10**18); \n\n        deployer = _msgSender();\n        parentToken = _parentToken;\n        transferOwnership(_parentToken);\n    }\n\n    //== BEP20 owner function ==\n    function getOwner() public view override returns (address) {\n        return owner();\n    }\n\n    function updateDeployerAddress(address newDeployer) external onlyOwnerOrDeployer{\n        require(deployer != newDeployer, \"The address is already set\");\n        deployer = newDeployer;\n        emit LogUpdateDeployerAddress(newDeployer);\n    }\n\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\n        public\n        override(ERC20TokenRecover, IERC20TokenRecover)\n        onlyOwner\n    {\n        require(tokenAddress != dividendToken, \"RoburnaDividendTracker: Cannot retrieve USDT\");\n        super.recoverERC20(tokenAddress, tokenAmount);\n    }\n\n    function _transfer(\n        address,\n        address,\n        uint256\n    ) internal pure override {\n        require(false, \"RoburnaDividendTracker: No transfers allowed\");\n    }\n\n    function withdrawDividend() public pure override(DividendPayingToken, IDividendPayingTokenInterface) {\n        require(\n            false,\n            \"RoburnaDividendTracker: Disabled. Use the 'claim' function on the main Roburna contract.\"\n        );\n    }\n\n    function excludeFromDividends(address account) external override onlyOwnerOrDeployer {\n        require(!excludedFromDividends[account], \"RoburnaDividendTracker: Account already excluded\");\n        excludedFromDividends[account] = true;\n\n        _setBalance(account, 0);\n        tokenHoldersMap.remove(account);\n\n        emit ExcludeFromDividends(account);\n    }\n\n    function includeInDividends(address account) external override onlyOwnerOrDeployer {\n        require(excludedFromDividends[account], \"RoburnaDividendTracker: Account not excluded\");\n\n        excludedFromDividends[account] = false;\n        _setBalance(account, 0);\n\n        emit IncludedInDividends(account);\n    }\n\n    function updateClaimWait(uint256 newClaimWait) external override onlyOwnerOrDeployer {\n        require(\n            newClaimWait >= 3600 && newClaimWait <= 86400,\n            \"RoburnaDividendTracker: claimWait must be updated to between 1 and 24 hours\"\n        );\n        require(newClaimWait != claimWait, \"RoburnaDividendTracker: Cannot update claimWait to same value\");\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\n        claimWait = newClaimWait;\n    }\n\n    function updateMinTokenBalance(uint256 minTokens) external override onlyOwnerOrDeployer {\n        minimumTokenBalanceForDividends = minTokens * (10**18);\n        emit LogUpdateMinTokenBalance(minTokens);\n    }\n\n    function getLastProcessedIndex() external view override returns (uint256) {\n        return lastProcessedIndex;\n    }\n\n    function getNumberOfTokenHolders() external view override returns (uint256) {\n        return tokenHoldersMap.keys.length;\n    }\n\n    function getAccount(address _account)\n        public\n        view\n        override\n        returns (\n            address account,\n            int256 index,\n            int256 iterationsUntilProcessed,\n            uint256 withdrawableDividends,\n            uint256 totalDividends,\n            uint256 lastClaimTime,\n            uint256 nextClaimTime,\n            uint256 secondsUntilAutoClaimAvailable\n        )\n    {\n        account = _account;\n\n        index = tokenHoldersMap.getIndexOfKey(account);\n\n        iterationsUntilProcessed = -1;\n\n        if (index >= 0) {\n            if (uint256(index) > lastProcessedIndex) {\n                iterationsUntilProcessed = index - int256(lastProcessedIndex);\n            } else {\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex\n                    ? tokenHoldersMap.keys.length - lastProcessedIndex\n                    : 0;\n                iterationsUntilProcessed = index + int256(processesUntilEndOfArray);\n            }\n        }\n\n        withdrawableDividends = withdrawableDividendOf(account);\n        totalDividends = accumulativeDividendOf(account);\n\n        lastClaimTime = lastClaimTimes[account];\n\n        nextClaimTime = lastClaimTime > 0 ? lastClaimTime + claimWait : 0;\n\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ? nextClaimTime - block.timestamp : 0;\n    }\n\n    function getAccountAtIndex(uint256 index)\n        external\n        view\n        override\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        if (index >= tokenHoldersMap.size()) return (address(0), -1, -1, 0, 0, 0, 0, 0);\n        address account = tokenHoldersMap.getKeyAtIndex(index);\n        return getAccount(account);\n    }\n\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\n        if (lastClaimTime > block.timestamp) {\n            return false;\n        }\n\n        return (block.timestamp - lastClaimTime) >= claimWait;\n    }\n\n    function ensureBalance(bool _process) external override {\n        ensureBalanceForUser(payable(_msgSender()), _process);\n    }\n\n    function ensureBalanceForUsers(address payable[] memory accounts, bool _process)\n        external\n        override\n        onlyOwnerOrDeployer\n    {\n        for (uint256 idx = 0; idx < accounts.length; idx++) {\n            ensureBalanceForUser(accounts[idx], _process);\n        }\n    }\n\n    function ensureBalanceForUser(address payable account, bool _process) public override onlyOwnerOrDeployer {\n        uint256 balance = IERC20(parentToken).balanceOf(account);\n\n        if (excludedFromDividends[account]) return;\n\n        if (balance != balanceOf(account)) {\n            if (balance >= minimumTokenBalanceForDividends) {\n                _setBalance(account, balance);\n                tokenHoldersMap.set(account, balance);\n            } else {\n                _setBalance(account, 0);\n                tokenHoldersMap.remove(account);\n            }\n        }\n\n        if (_process) processAccount(account, false);\n    }\n\n    function setBalance(address payable account, uint256 newBalance) external override onlyOwner {\n        if (excludedFromDividends[account]) return;\n\n        if (newBalance >= minimumTokenBalanceForDividends) {\n            _setBalance(account, newBalance);\n            tokenHoldersMap.set(account, newBalance);\n        } else {\n            _setBalance(account, 0);\n            tokenHoldersMap.remove(account);\n        }\n\n        processAccount(account, true);\n    }\n\n    function process(uint256 gas)\n        external\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\n\n        if (numberOfTokenHolders == 0) {\n            return (0, 0, lastProcessedIndex);\n        }\n\n        uint256 _lastProcessedIndex = lastProcessedIndex;\n\n        uint256 gasUsed = 0;\n\n        uint256 gasLeft = gasleft();\n\n        uint256 iterations = 0;\n        uint256 claims = 0;\n\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\n            _lastProcessedIndex++;\n\n            if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\n                _lastProcessedIndex = 0;\n            }\n\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\n\n            if (canAutoClaim(lastClaimTimes[account])) {\n                if (processAccount(payable(account), true)) {\n                    claims++;\n                }\n            }\n\n            iterations++;\n\n            uint256 newGasLeft = gasleft();\n            if (gasLeft > newGasLeft) gasUsed = gasUsed + (gasLeft - newGasLeft);\n            gasLeft = newGasLeft;\n        }\n\n        lastProcessedIndex = _lastProcessedIndex;\n\n        return (iterations, claims, lastProcessedIndex);\n    }\n\n    function processAccount(address payable account, bool automatic)\n        public\n        override\n        onlyOwnerOrDeployer\n        returns (bool)\n    {\n        uint256 amount = _withdrawDividendOfUser(account);\n\n        if (amount > 0) {\n            lastClaimTimes[account] = block.timestamp;\n            emit Claim(account, amount, automatic);\n            return true;\n        }\n\n        return false;\n    }\n}\n"
    },
    "contracts/mock/rba/libraries/IterableMapping.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary IterableMapping {\n    // Iterable mapping from address to uint;\n    struct Map {\n        address[] keys;\n        mapping(address => uint256) values;\n        mapping(address => uint256) indexOf;\n        mapping(address => bool) inserted;\n    }\n\n    function get(Map storage map, address key) internal view returns (uint256) {\n        return map.values[key];\n    }\n\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\n        if (!map.inserted[key]) {\n            return -1;\n        }\n        return int256(map.indexOf[key]);\n    }\n\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\n        return map.keys[index];\n    }\n\n    function size(Map storage map) internal view returns (uint256) {\n        return map.keys.length;\n    }\n\n    function set(\n        Map storage map,\n        address key,\n        uint256 val\n    ) internal {\n        if (map.inserted[key]) {\n            map.values[key] = val;\n        } else {\n            map.inserted[key] = true;\n            map.values[key] = val;\n            map.indexOf[key] = map.keys.length;\n            map.keys.push(key);\n        }\n    }\n\n    function remove(Map storage map, address key) internal {\n        if (!map.inserted[key]) {\n            return;\n        }\n\n        delete map.inserted[key];\n        delete map.values[key];\n\n        uint256 index = map.indexOf[key];\n        uint256 lastIndex = map.keys.length - 1;\n        address lastKey = map.keys[lastIndex];\n\n        map.indexOf[lastKey] = index;\n        delete map.indexOf[key];\n\n        map.keys[index] = lastKey;\n        map.keys.pop();\n    }\n}\n"
    },
    "contracts/mock/rba/token/extensions/ERC20TokenRecover.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IERC20TokenRecover.sol\";\n\n/**\n * @title ERC20TokenRecover\n * @dev Allows owner to recover any ERC20 or ETH sent into the contract\n * based on https://github.com/vittominacori/eth-token-recover by Vittorio Minacori\n */\ncontract ERC20TokenRecover is Ownable, IERC20TokenRecover {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice function that transfers an token amount from this contract to the owner when accidentally sent\n     * @param tokenAddress The token contract address\n     * @param tokenAmount Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public virtual override onlyOwner {\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n    }\n\n    /**\n     * @notice function that transfers an eth amount from this contract to the owner when accidentally sent\n     * @param amount Number of eth to be sent\n     */\n    function recoverETH(uint256 amount) public virtual override onlyOwner {\n        (bool sent, ) = owner().call{value: amount}(\"\");\n        require(sent, \"ERC20TokenRecover: SENDING_ETHER_FAILED\");\n    }\n}\n"
    },
    "contracts/mock/rba/IRoburna.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./interfaces/IDEXRouter.sol\";\nimport \"./token/interfaces/IBEP20.sol\";\nimport \"./token/ERC1363/IERC1363.sol\";\nimport \"./token/ERC2612/IERC2612.sol\";\nimport \"./token/interfaces/IERC20Burnable.sol\";\nimport \"./token/interfaces/IERC20TokenRecover.sol\";\nimport \"./IRoburnaDividendTracker.sol\";\n\ninterface IRoburna is IBEP20, IERC1363, IERC2612, IERC20Burnable, IERC20TokenRecover {\n    function dexRouters(address router) external view returns (bool);\n\n    // store addresses that are automatic market maker (dex) pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    function automatedMarketMakerPairs(address pair) external view returns (bool);\n\n    function defaultDexRouter() external view returns (IDEXRouter);\n\n    function defaultPair() external view returns (address);\n\n    function USDC() external view returns (address);\n\n    function marketingWallet() external view returns (address);\n\n    function liquidityWallet() external view returns (address);\n\n    function buyBackWallet() external view returns (address);\n\n    function blackListWallet() external view returns (address);\n\n    function dividendTracker() external view returns (IRoburnaDividendTracker);\n\n    function transfersEnabled() external view returns (bool);\n\n    // Supply and amounts\n    function swapTokensAtAmount() external view returns (uint256);\n\n\n    // fees (from a total of 10000)\n    function buyFeesCollected() external view returns (uint256);\n\n    function buyDividendFee() external view returns (uint256);\n\n    function buyLiquidityFee() external view returns (uint256);\n\n    function buyMarketingFee() external view returns (uint256);\n\n    function buyBuyBackFee() external view returns (uint256);\n\n    function buyTotalFees() external view returns (uint256);\n\n    function sellFeesCollected() external view returns (uint256);\n\n    function sellDividendFee() external view returns (uint256);\n\n    function sellLiquidityFee() external view returns (uint256);\n\n    function sellMarketingFee() external view returns (uint256);\n\n    function sellBuyBackFee() external view returns (uint256);\n\n    function sellTotalFees() external view returns (uint256);\n\n    function gasForProcessing() external view returns (uint256);\n\n    // white listed adresses (excluded from fees and dividends)\n    // these addresses can also make transfers before presale is over\n    function whitelistedAddresses(address account) external view returns (bool);\n\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\n\n    event UpdateDefaultDexRouter(address indexed newAddress, address indexed oldAddress);\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event marketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\n\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\n\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n\n    event FixedSaleBuy(\n        address indexed account,\n        uint256 indexed amount,\n        bool indexed earlyParticipant,\n        uint256 numberOfBuyers\n    );\n\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\n\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\n\n    event ProcessedDividendTracker(\n        uint256 iterations,\n        uint256 claims,\n        uint256 lastProcessedIndex,\n        bool indexed automatic,\n        uint256 gas,\n        address indexed processor\n    );\n\n    function initializeDividendTracker(IRoburnaDividendTracker _dividendTracker) external;\n\n    function setWhitelistAddress(address _whitelistAddress, bool whitelisted) external;\n\n    function updateDividendTracker(address newAddress) external;\n\n    function addNewRouter(address _router, bool makeDefault) external;\n\n    function excludeFromFees(address account, bool excluded) external;\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external;\n\n    function setAutomatedMarketMakerPair(address pair, bool value) external;\n\n    function updateMinTokenBalance(uint256 minTokens) external;\n\n    function updateMarketingWallet(address newMarketingWallet) external;\n\n    function updateLiquidityWallet(address newLiquidityWallet) external;\n\n    function updateGasForProcessing(uint256 newValue) external;\n\n    function updateClaimWait(uint256 claimWait) external;\n\n    function getClaimWait() external view returns (uint256);\n\n    function getTotalDividendsDistributed() external view returns (uint256);\n\n    function isExcludedFromFees(address account) external view returns (bool);\n\n    function withdrawableDividendOf(address account) external view returns (uint256);\n\n    function dividendTokenBalanceOf(address account) external view returns (uint256);\n\n    function getAccountDividendsInfo(address account)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function getAccountDividendsInfoAtIndex(uint256 index)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function processDividendTracker(uint256 gas) external;\n\n    function claim() external;\n\n    function getLastProcessedIndex() external view returns (uint256);\n\n    function getNumberOfDividendTokenHolders() external view returns (uint256);\n\n    /**\n     * Enable or disable transfers, used before presale and on critical problems in or with the token contract\n     */\n    function setTransfersEnabled(bool enabled) external;\n\n    function updateBuyFees(\n        uint256 _dividendFee,\n        uint256 _liquidityFee,\n        uint256 _marketingFee,\n        uint256 _buyBackFee\n    ) external;\n\n    function updateSellFees(\n        uint256 _dividendFee,\n        uint256 _liquidityFee,\n        uint256 _marketingFee,\n        uint256 _buyBackFee\n    ) external;\n\n    function updateSwapTokensAtAmount(uint256 _swapTokensAtAmount) external;\n}\n"
    },
    "contracts/mock/rba/interfaces/IDEXRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\n/**\n * Supports the Uniswap V1 + V2 structure\n */\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/mock/rba/token/ERC1363/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363 Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for a Payable Token contract as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363 {\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferAndCall(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\n     * @return true unless throwing\n     */\n    function transferAndCall(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param sender address The address which you want to send tokens from\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param sender address The address which you want to send tokens from\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     */\n    function approveAndCall(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\n     */\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n"
    },
    "contracts/mock/rba/token/ERC2612/IERC2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC2612 standard as defined in the EIP.\n *\n * Adds the {permit} method, which can be used to change one's\n * {IERC20-allowance} without having to send a transaction, by signing a\n * message. This allows users to spend tokens without having to hold Ether.\n *\n * See https://eips.ethereum.org/EIPS/eip-2612.\n */\ninterface IERC2612 {\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /**\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Sets `value` as allowance of `spender` account over `owner` account's token,\n     * given `owner` account's signed approval.\n     * Emits {Approval} event.\n     * Requirements:\n     *   - `deadline` must be timestamp in future.\n     *   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over\n     *      EIP712-formatted function arguments.\n     *   - the signature must use `owner` account's current nonce (see {nonces}).\n     *   - the signer cannot be zero address and must be `owner` account.\n     * For more information on signature format, see\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Same as permit, but also performs a transfer\n     */\n    function transferWithPermit(\n        address owner,\n        address to,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (bool);\n}\n"
    },
    "contracts/mock/rba/token/interfaces/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Based on @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\n */\ninterface IERC20Burnable {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) external;\n}\n"
    },
    "contracts/mock/rba/Roburna.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.4;\n\nimport \"./token/ERC20.sol\";\nimport \"./token/ERC1363/ERC1363.sol\";\nimport \"./token/ERC2612/ERC2612.sol\";\nimport \"./token/extensions/ERC20Burnable.sol\";\nimport \"./token/extensions/ERC20TokenRecover.sol\";\nimport \"./interfaces/IDEXRouter.sol\";\nimport \"./interfaces/IDEXFactory.sol\";\nimport \"./interfaces/IDEXPair.sol\";\nimport \"./IRoburna.sol\";\nimport \"./IRoburnaDividendTracker.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n\ncontract Roburna is ERC20, ERC1363, ERC2612, ERC20Burnable, ERC20TokenRecover, IRoburna {\n    using SafeMath for uint256;\n    mapping(address => bool) public override dexRouters;\n    // store addresses that are automatic market maker (dex) pairs. Any transfer *to* these addresses\n    mapping(address => bool) public override automatedMarketMakerPairs;\n\n    IDEXRouter public override defaultDexRouter;\n    address public override defaultPair;\n\n    address public immutable override USDC;\n    address public override marketingWallet;\n    address public override liquidityWallet;\n    address public override buyBackWallet;\n    address public override blackListWallet;\n    // to accommodate lock or unlock balance by bridge\n    address public bridgeVault;\n    address public bridge;\n    IRoburnaDividendTracker public override dividendTracker;\n\n\n    bool public override transfersEnabled = false;\n    bool private isSwappingFees;\n\n    // Supply and amounts\n    // 1 billion (this will also be the total supply as there is not public mint function)\n    uint256 private _startSupply = 1 * (10**9) * (10**18);\n    uint256 public override swapTokensAtAmount = 20000 * (10**18);\n    \n\n    // fees (from a total of 10000)\n    uint256 public override buyFeesCollected = 0;\n    uint256 public override buyBuyBackFee = 800;\n    uint256 public override buyDividendFee = 400;\n    uint256 public override buyLiquidityFee = 200;\n    uint256 public override buyMarketingFee = 500;\n    uint256 public override buyTotalFees = buyDividendFee + buyLiquidityFee + buyMarketingFee + buyBuyBackFee;\n\n    uint256 public override sellFeesCollected = 0;\n    uint256 public override sellBuyBackFee = 800;\n    uint256 public override sellDividendFee = 400;\n    uint256 public override sellLiquidityFee = 200;\n    uint256 public override sellMarketingFee = 500;\n    uint256 public override sellTotalFees = sellDividendFee + sellLiquidityFee + sellMarketingFee + sellBuyBackFee;\n\n    // use by default 300,000 gas to process auto-claiming dividends\n    uint256 public override gasForProcessing = 300000;\n\n    // white listed adresses (excluded from fees and dividends)\n    // these addresses can also make transfers before presale is over\n    mapping(address => bool) public override whitelistedAddresses;\n\n    // exlcude from fees \n    mapping(address => bool) private _isExcludedFromFees;\n    mapping(address => bool) private _isBlackListed;\n    mapping(address => uint256) private _blackListedAmount;\n\n    event LogAddressBlackListed(address account);\n    event LogAddressRemovedFromBL(address account);\n    event LogSetBridge(address indexed setter, address bridge);\n    event LogLockByBridge(address indexed account, uint256 amount);\n    event LogUnlockByBridge(address indexed account, uint256 amount);\n    event LogSetBuyBackWallet(address account);\n    event LogSetBridgeVault(address account);\n    event LogSetBlackListWallet(address _blackListWallet);\n    event LogUpdateNameAndSymbol(string name, string symbol);\n    event LogSetTransfersEnabled(bool enabled);\n    event LogUpdateSwapTokensAtAmount(uint256 tokens);\n\n\n    bool private nameChanged = false;\n\n    constructor(\n        address _routerAddress,\n        address _usdc,\n        address _marketingWallet, \n        address _buyBackWallet,\n        address _blackListWallet,\n        address _bridgeVault\n    ) ERC2612(\"Roburna\", \"RBA\") {\n        IDEXRouter _dexRouter = IDEXRouter(_routerAddress);\n        USDC = _usdc;\n        \n        marketingWallet = _marketingWallet;\n        liquidityWallet = owner();\n        buyBackWallet = _buyBackWallet;\n        blackListWallet = _blackListWallet;\n        bridgeVault = _bridgeVault;\n       \n        defaultDexRouter = _dexRouter;\n        dexRouters[_routerAddress] = true;\n        defaultPair = IDEXFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\n        _setAutomatedMarketMakerPair(defaultPair, true);\n\n        //_mint is an internal function in ERC20.sol that is only called here, and CANNOT be called ever again\n        _mint(owner(), _startSupply);\n    }\n\n    /**\n     * @dev because bridgeVault not receive reward\n     */\n    function circulatingSupply() external view returns (uint256) {\n        return _startSupply.sub(balanceOf(bridgeVault));\n    }\n\n    function setBuyBackWallet(address _buyBackWallet) external onlyOwner{\n        require(_buyBackWallet != address(0), \"Invalid address\");\n        require(_buyBackWallet != buyBackWallet, \"Already set to this address\");\n        buyBackWallet = _buyBackWallet;\n        emit LogSetBuyBackWallet(_buyBackWallet);\n    }\n\n    function setBridgeVault(address _bridgeVault) external onlyOwner{\n        require(_bridgeVault != address(0), \"Invalid address\");\n        require(_bridgeVault != bridgeVault, \"Already set to this address\");\n        bridgeVault = _bridgeVault;\n        emit LogSetBridgeVault(_bridgeVault);\n    }\n\n    function setBlackListWallet(address _blackListWallet) external onlyOwner{\n        require(_blackListWallet != address(0), \"Invalid address\");\n        require(_blackListWallet != blackListWallet, \"Already set to this address\");\n        blackListWallet = _blackListWallet;\n        emit LogSetBlackListWallet(_blackListWallet);\n    }\n\n    function initializeDividendTracker(IRoburnaDividendTracker _dividendTracker) external override onlyOwner {\n        require(address(dividendTracker) == address(0), \"Roburna: Dividend tracker already initialized\");\n        dividendTracker = _dividendTracker;\n\n        // exclude from receiving dividends\n        dividendTracker.excludeFromDividends(address(defaultPair));\n        dividendTracker.excludeFromDividends(address(dividendTracker));\n        dividendTracker.excludeFromDividends(address(defaultDexRouter));\n        dividendTracker.excludeFromDividends(bridgeVault);\n\n        // whitlist wallets f.e. owner wallet to send tokens before presales are over\n        setWhitelistAddress(address(this), true);\n        setWhitelistAddress(owner(), true);\n        setWhitelistAddress(marketingWallet, true);\n    }\n\n    receive() external payable {}\n\n    //== BEP20 owner function ==\n    function getOwner() public view override returns (address) {\n        return owner();\n    }\n\n    function updateNameAndSymbol(string memory name_, string memory symbol_) external onlyOwner {\n        require(!nameChanged, \"Roburna: Name already changed\");\n        _name = name_;\n        _symbol = symbol_;\n        nameChanged = true;\n        emit LogUpdateNameAndSymbol(_name, _symbol);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1363, ERC2612) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\n        public\n        override(ERC20TokenRecover, IERC20TokenRecover)\n        onlyOwner\n    {\n        require(tokenAddress != address(this), \"Cannot retrieve Roburna\");\n        super.recoverERC20(tokenAddress, tokenAmount);\n    }\n\n    function setWhitelistAddress(address _whitelistAddress, bool whitelisted) public override onlyOwner {\n        whitelistedAddresses[_whitelistAddress] = whitelisted;\n        excludeFromFees(_whitelistAddress, whitelisted);\n        if (whitelisted) {\n            dividendTracker.excludeFromDividends(_whitelistAddress);\n        } else {\n            dividendTracker.includeInDividends(_whitelistAddress);\n        }\n    }\n\n    function updateDividendTracker(address newAddress) external override onlyOwner {\n        require(newAddress != address(0), \"Roburna: Dividend tracker not yet initialized\");\n        require(newAddress != address(dividendTracker), \"Roburna: The dividend tracker already has that address\");\n\n        IRoburnaDividendTracker newDividendTracker = IRoburnaDividendTracker(payable(newAddress));\n        require(\n            newDividendTracker.getOwner() == address(this),\n            \"Roburna: The new dividend tracker must be owned by the Roburna token contract\"\n        );\n\n        setWhitelistAddress(address(newDividendTracker), true);\n        dividendTracker = newDividendTracker;\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\n    }\n\n    function addNewRouter(address _router, bool makeDefault) external override onlyOwner {\n        dexRouters[_router] = true;\n        dividendTracker.excludeFromDividends(_router);\n\n        if (makeDefault) {\n            emit UpdateDefaultDexRouter(_router, address(defaultDexRouter));\n            defaultDexRouter = IDEXRouter(_router);\n            defaultPair = IDEXFactory(defaultDexRouter.factory()).createPair(address(this), defaultDexRouter.WETH());\n            _setAutomatedMarketMakerPair(defaultPair, true);\n        }\n    }\n\n    function excludeFromFees(address account, bool excluded) public override onlyOwner {\n        require(_isExcludedFromFees[account] != excluded, \"Roburna: Account is already the value of 'excluded'\");\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external override onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            excludeFromFees(accounts[i], excluded);\n        }\n    }\n\n    function setAutomatedMarketMakerPair(address pair, bool value) external override onlyOwner {\n        require(\n            value || pair != defaultPair,\n            \"Roburna: The default pair cannot be removed from automatedMarketMakerPairs\"\n        );\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        require(\n            automatedMarketMakerPairs[pair] != value,\n            \"Roburna: Automated market maker pair is already set to that value\"\n        );\n\n        automatedMarketMakerPairs[pair] = value;\n        if (value && address(dividendTracker) != address(0)) dividendTracker.excludeFromDividends(pair);\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function updateMinTokenBalance(uint256 minTokens) external override onlyOwner {\n        dividendTracker.updateMinTokenBalance(minTokens);\n    }\n\n    function updateMarketingWallet(address newMarketingWallet) external override onlyOwner {\n        require(newMarketingWallet != marketingWallet, \"Roburna: The marketing wallet is already this address\");\n        setWhitelistAddress(newMarketingWallet, true);\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\n        marketingWallet = newMarketingWallet;\n    }\n\n    function updateLiquidityWallet(address newLiquidityWallet) external override onlyOwner {\n        require(newLiquidityWallet != liquidityWallet, \"Roburna: The liquidity wallet is already this address\");\n        setWhitelistAddress(newLiquidityWallet, true);\n        emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\n        liquidityWallet = newLiquidityWallet;\n    }\n\n    function updateGasForProcessing(uint256 newValue) external override onlyOwner {\n        require(\n            newValue >= 200000 && newValue <= 500000,\n            \"Roburna: gasForProcessing must be between 200,000 and 500,000\"\n        );\n        require(newValue != gasForProcessing, \"Roburna: Cannot update gasForProcessing to same value\");\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\n        gasForProcessing = newValue;\n    }\n\n    function updateClaimWait(uint256 claimWait) external override onlyOwner {\n        dividendTracker.updateClaimWait(claimWait);\n    }\n\n    function getClaimWait() external view override returns (uint256) {\n        return dividendTracker.claimWait();\n    }\n\n    function getTotalDividendsDistributed() external view override returns (uint256) {\n        return dividendTracker.totalDividendsDistributed();\n    }\n\n    function isExcludedFromFees(address account) external view override returns (bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function withdrawableDividendOf(address account) external view override returns (uint256) {\n        return dividendTracker.withdrawableDividendOf(account);\n    }\n\n    function dividendTokenBalanceOf(address account) external view override returns (uint256) {\n        return dividendTracker.balanceOf(account);\n    }\n\n    function getAccountDividendsInfo(address account)\n        external\n        view\n        override\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return dividendTracker.getAccount(account);\n    }\n\n    function getAccountDividendsInfoAtIndex(uint256 index)\n        external\n        view\n        override\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return dividendTracker.getAccountAtIndex(index);\n    }\n\n    function processDividendTracker(uint256 gas) external override {\n        (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\n        emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\n    }\n\n    function claim() external override {\n        dividendTracker.processAccount(payable(msg.sender), false);\n    }\n\n    function getLastProcessedIndex() external view override returns (uint256) {\n        return dividendTracker.getLastProcessedIndex();\n    }\n\n    function getNumberOfDividendTokenHolders() external view override returns (uint256) {\n        return dividendTracker.getNumberOfTokenHolders();\n    }\n\n    /**\n     * Enable or disable transfers, used before presale and on critical problems in or with the token contract\n     */\n    function setTransfersEnabled(bool enabled) external override onlyOwner {\n        transfersEnabled = enabled;\n        emit LogSetTransfersEnabled(enabled);\n    }\n\n    function updateBuyFees(\n        uint256 _dividendFee,\n        uint256 _liquidityFee,\n        uint256 _marketingFee,\n        uint256 _buyBackFee\n    ) external override onlyOwner {\n        buyDividendFee = _dividendFee;\n        buyLiquidityFee = _liquidityFee;\n        buyMarketingFee = _marketingFee;\n        buyBuyBackFee = _buyBackFee;\n        buyTotalFees = buyDividendFee + buyLiquidityFee + buyMarketingFee + buyBuyBackFee;\n        require(buyTotalFees <= 5000, \"Max fee  is 50%\");\n    }\n\n    function updateSellFees(\n        uint256 _dividendFee,\n        uint256 _liquidityFee,\n        uint256 _marketingFee,\n        uint256 _buyBackFee\n    ) external override onlyOwner {\n        sellDividendFee = _dividendFee;\n        sellLiquidityFee = _liquidityFee;\n        sellMarketingFee = _marketingFee;\n        sellBuyBackFee = _buyBackFee;\n        sellTotalFees = sellDividendFee + sellLiquidityFee + sellMarketingFee + sellBuyBackFee;\n        require(sellTotalFees <= 5000, \"Max fee is 50%\");\n    }\n\n    function updateSwapTokensAtAmount(uint256 _swapTokensAtAmount) external override onlyOwner {\n        require(_swapTokensAtAmount > 0, \"Roburna: Amount should be higher then 0\");\n        require(_swapTokensAtAmount <= 100000000 * (10**18), \"Roburna: Max should be at 10%\");\n        swapTokensAtAmount = _swapTokensAtAmount;\n        emit LogUpdateSwapTokensAtAmount(swapTokensAtAmount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(_isBlackListed[from] != true, \"Address blacklisted\");\n        require(_isBlackListed[to] != true, \"Address blacklisted\");\n\n        // only whitelisted addresses can make transfers when transfers are disabled\n        if (!transfersEnabled) {\n            require(whitelistedAddresses[from], \"Roburna: Transfering is disabled\");\n        }\n\n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n\n        uint256 senderBalance = balanceOf(from);\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n\n        // take fee\n        amount = collectFees(from, to, amount);\n\n        if (address(dividendTracker) != address(0)) {\n            try dividendTracker.setBalance(payable(from), balanceOf(from) - amount) {} catch {}\n            try dividendTracker.setBalance(payable(to), balanceOf(to) + amount) {} catch {}\n        }\n\n        // swap fees before transfer has happened and after dividend balances are done\n        swapFeesIfAmountIsReached(from, to);\n\n        super._transfer(from, to, amount);\n\n        if (address(dividendTracker) != address(0) && !isSwappingFees) {\n            uint256 gas = gasForProcessing;\n\n            try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\n            } catch {}\n        }\n    }\n\n    function collectFees(\n        address from,\n        address to,\n        uint256 amount\n    ) private returns (uint256) {\n        if (!isSwappingFees && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] ) {\n            uint256 fees;\n            (amount*sellTotalFees/10000);\n            if (automatedMarketMakerPairs[from]) {\n                fees = (amount * buyTotalFees) / 10000;\n                buyFeesCollected += fees;\n            } else if (automatedMarketMakerPairs[to]) {\n                fees = (amount * sellTotalFees) / 10000;\n                sellFeesCollected += fees;\n            }\n\n            amount = amount - fees;\n            super._transfer(from, address(this), fees);\n        }\n        return amount;\n    }\n\n    function swapFeesIfAmountIsReached(address from, address to) private {\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n        \n        if (\n            contractTokenBalance >= swapTokensAtAmount &&\n            !isSwappingFees &&\n            !automatedMarketMakerPairs[from] && // do not swap fees on buys\n            from != liquidityWallet &&\n            to != liquidityWallet\n\n        \n        ) {\n            isSwappingFees = true;\n\n            buyFeesCollected = (contractTokenBalance / (buyFeesCollected + sellFeesCollected)) * buyFeesCollected;\n            sellFeesCollected = contractTokenBalance - buyFeesCollected;\n\n            uint256 marketingTokens = (buyFeesCollected * buyMarketingFee) / buyTotalFees;\n            marketingTokens += (sellFeesCollected * sellMarketingFee) / sellTotalFees;\n            if (marketingTokens > 0) swapAndSendToFee(marketingTokens);\n\n            uint256 buyBackTokens = (buyFeesCollected * buyBuyBackFee) / buyTotalFees;\n            buyBackTokens += (sellFeesCollected * sellBuyBackFee) / sellTotalFees;\n            if (buyBackTokens > 0){\n                super._transfer(address(this), buyBackWallet, buyBackTokens);\n            }\n\n            uint256 swapTokens = (buyFeesCollected * buyLiquidityFee) / buyTotalFees;\n            swapTokens = (sellFeesCollected * sellLiquidityFee) / sellTotalFees;\n            if (swapTokens > 0) swapAndLiquify(swapTokens);\n\n            uint256 sellTokens = balanceOf(address(this));\n            if (sellTokens > 0) swapAndSendDividends(sellTokens);\n\n            buyFeesCollected = 0;\n            sellFeesCollected = 0;\n\n            isSwappingFees = false;\n        }\n    }\n\n    function swapAndSendToFee(uint256 tokens) private {\n        uint256 initialBNBBalance = address(this).balance;\n        swapTokensForEth(tokens);\n        uint256 newBNBBalance = address(this).balance - initialBNBBalance;\n        payable(marketingWallet).transfer(newBNBBalance);\n    }\n\n    function swapAndLiquify(uint256 tokens) private {\n        // split the contract balance into halves\n        uint256 half = tokens / 2;\n        uint256 otherHalf = tokens - half;\n\n        // capture the contract's current BNB balance.\n        // this is so that we can capture exactly the amount of BNB that the\n        // swap creates, and not make the liquidity event include any BNB that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for BNB\n        swapTokensForEth(half); // <- this breaks the BNB -> RBA swap when swap+liquify is triggered\n\n        // how much BNB did we just swap into?\n        uint256 newBalance = address(this).balance - initialBalance;\n\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> wBNB\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = defaultDexRouter.WETH();\n\n        _approve(address(this), address(defaultDexRouter), tokenAmount);\n\n        // make the swap\n        defaultDexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of BNB\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(defaultDexRouter), tokenAmount);\n\n        // add the liquidity\n        defaultDexRouter.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            liquidityWallet,\n            block.timestamp\n        );\n    }\n\n    function swapAndSendDividends(uint256 tokens) private {\n        swapTokensForUSDC(tokens, address(this));\n        uint256 dividends = IERC20(USDC).balanceOf(address(this));\n        bool success = IERC20(USDC).transfer(address(dividendTracker), dividends);\n        \n\n        if (success){\n            dividendTracker.distributeDividends(dividends);\n            emit SendDividends(tokens, dividends);\n        }\n           \n    }\n\n    function swapTokensForUSDC(uint256 tokenAmount, address recipient) private {\n        // generate the uniswap pair path of wBNB -> USDC\n        address[] memory path = new address[](3);\n        path[0] = address(this);\n        path[1] = defaultDexRouter.WETH();\n        path[2] = USDC;\n\n        _approve(address(this), address(defaultDexRouter), tokenAmount);\n\n        // make the swap\n        defaultDexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of USDC\n            path,\n            recipient,\n            block.timestamp\n        );\n    }\n\n    function blackListAccount(address account) external onlyOwner{\n        require(_isBlackListed[account] != true, \"Already blacklisted\");\n        require(account != address(0), \"Address zero validation\");\n        _isBlackListed[account] = true;\n        uint256 amount = balanceOf(account);\n        _blackListedAmount[account] = amount;\n        super._transfer(account, blackListWallet, amount);\n        emit LogAddressBlackListed(account);\n    }\n\n    function removeFromBlackList(address account) external onlyOwner{\n        require(_isBlackListed[account] != false, \"Already removed\");\n        require(balanceOf(blackListWallet) >= _blackListedAmount[account], \"Insuficcient blackListWallet balance\");\n        _isBlackListed[account] = false;\n        uint256 amount = _blackListedAmount[account];\n        super._transfer(blackListWallet, account, amount);\n        emit LogAddressRemovedFromBL(account);\n    }\n\n    modifier onlyBridge() {\n        require(msg.sender == bridge, \"Only bridge can perform this action\");\n        _;\n    }\n\n    function setBridge(address _bridge) external onlyOwner {\n        require(_bridge != address(0), \"Zero Address\");\n        require(bridge != _bridge, \"Same Bridge!\");\n        bridge = _bridge;\n\n        emit LogSetBridge(msg.sender, bridge);\n    }\n\n    function lock(address account, uint256 amount) external onlyBridge {\n        require(account != address(0), \"Zero address\");\n        require(amount > 0, \"Lock amount must be greater than zero\");\n        require(amount <= balanceOf(account), \"Insufficient funds\");\n        \n        super._transfer(account, bridgeVault, amount);\n\n        emit LogLockByBridge(account, amount);\n    }\n\n    /**\n     * @dev no need approval, because bridgeVault balance is controlled by ROBURNA\n     */\n    function unlock(address account, uint256 amount) external onlyBridge {\n        require(account != address(0), \"Zero address\");\n        require(amount > 0, \"Unlock amount must be greater than zero\");\n        require(amount <= balanceOf(bridgeVault), \"Insufficient funds\");\n\n        super._transfer(bridgeVault, account, amount);\n        \n        emit LogUnlockByBridge(account, amount);\n    }\n}\n"
    },
    "contracts/mock/rba/token/ERC1363/ERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./IERC1363.sol\";\nimport \"./IERC1363Receiver.sol\";\nimport \"./IERC1363Spender.sol\";\n\n/**\n * @title ERC1363\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of an ERC1363 interface\n */\nabstract contract ERC1363 is ERC165, ERC20, IERC1363 {\n    using Address for address;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\n     * @param recipient The address to transfer to.\n     * @param amount The amount to be transferred.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferAndCall(address recipient, uint256 amount) public virtual override returns (bool) {\n        return transferAndCall(recipient, amount, \"\");\n    }\n\n    /**\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\n     * @param recipient The address to transfer to\n     * @param amount The amount to be transferred\n     * @param data Additional data with no specified format\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferAndCall(\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        transfer(recipient, amount);\n        require(_checkAndCallTransfer(_msgSender(), recipient, amount, data), \"ERC1363: _checkAndCallTransfer reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\n     * @param sender The address which you want to send tokens from\n     * @param recipient The address which you want to transfer to\n     * @param amount The amount of tokens to be transferred\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        return transferFromAndCall(sender, recipient, amount, \"\");\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\n     * @param sender The address which you want to send tokens from\n     * @param recipient The address which you want to transfer to\n     * @param amount The amount of tokens to be transferred\n     * @param data Additional data with no specified format\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        transferFrom(sender, recipient, amount);\n        require(_checkAndCallTransfer(sender, recipient, amount, data), \"ERC1363: _checkAndCallTransfer reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\n     * @param spender The address allowed to transfer to\n     * @param amount The amount allowed to be transferred\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function approveAndCall(address spender, uint256 amount) public virtual override returns (bool) {\n        return approveAndCall(spender, amount, \"\");\n    }\n\n    /**\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\n     * @param spender The address allowed to transfer to.\n     * @param amount The amount allowed to be transferred.\n     * @param data Additional data with no specified format.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        approve(spender, amount);\n        require(_checkAndCallApprove(spender, amount, data), \"ERC1363: _checkAndCallApprove reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Internal function to invoke `onTransferReceived` on a target address\n     *  The call is not executed if the target address is not a contract\n     * @param sender address Representing the previous owner of the given token value\n     * @param recipient address Target address that will receive the tokens\n     * @param amount uint256 The amount mount of tokens to be transferred\n     * @param data bytes Optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkAndCallTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual returns (bool) {\n        if (!recipient.isContract()) {\n            return false;\n        }\n        bytes4 retval = IERC1363Receiver(recipient).onTransferReceived(_msgSender(), sender, amount, data);\n        return (retval == IERC1363Receiver(recipient).onTransferReceived.selector);\n    }\n\n    /**\n     * @dev Internal function to invoke `onApprovalReceived` on a target address\n     *  The call is not executed if the target address is not a contract\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkAndCallApprove(\n        address spender,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual returns (bool) {\n        if (!spender.isContract()) {\n            return false;\n        }\n        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(_msgSender(), amount, data);\n        return (retval == IERC1363Spender(spender).onApprovalReceived.selector);\n    }\n}\n"
    },
    "contracts/mock/rba/token/ERC2612/ERC2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./IERC2612.sol\";\n\n/**\n * Implementation adapted from\n * https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol.\n */\nabstract contract ERC2612 is ERC165, ERC20, IERC2612 {\n    mapping(address => uint256) public override nonces;\n\n    bytes32 public immutable PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public immutable TRANSFER_TYPEHASH =\n        keccak256(\"Transfer(address owner,address to,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public override DOMAIN_SEPARATOR;\n\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name_)),\n                keccak256(bytes(version())),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\n        return interfaceId == type(IERC2612).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Setting the version as a function so that it can be overriden\n     */\n    function version() public pure virtual returns (string memory) {\n        return \"1\";\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override {\n        verifyPermit(PERMIT_TYPEHASH, owner, spender, value, deadline, v, r, s);\n        _approve(owner, spender, value);\n    }\n\n    function transferWithPermit(\n        address owner,\n        address to,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (bool) {\n        verifyPermit(TRANSFER_TYPEHASH, owner, to, value, deadline, v, r, s);\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    function verifyPermit(\n        bytes32 typehash,\n        address owner,\n        address to,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        require(block.timestamp <= deadline, \"ERC20Permit: Expired permit\");\n\n        bytes32 hashStruct = keccak256(abi.encode(typehash, owner, to, value, nonces[owner]++, deadline));\n\n        require(\n            verifyEIP712(owner, hashStruct, v, r, s) || verifyPersonalSign(owner, hashStruct, v, r, s),\n            \"ERC20Permit: invalid signature\"\n        );\n    }\n\n    function verifyEIP712(\n        address owner,\n        bytes32 hashStruct,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (bool) {\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, hashStruct));\n        address signer = ecrecover(hash, v, r, s);\n        return (signer != address(0) && signer == owner);\n    }\n\n    function verifyPersonalSign(\n        address owner,\n        bytes32 hashStruct,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (bool) {\n        bytes32 hash = prefixed(hashStruct);\n        address signer = ecrecover(hash, v, r, s);\n        return (signer != address(0) && signer == owner);\n    }\n\n    /**\n     * @dev Builds a prefixed hash to mimic the behavior of eth_sign.\n     */\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "contracts/mock/rba/token/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../ERC20.sol\";\nimport \"../interfaces/IERC20Burnable.sol\";\n\n/**\n * @dev Based on @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\n */\nabstract contract ERC20Burnable is Context, ERC20, IERC20Burnable {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual override {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual override {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        _approve(account, _msgSender(), currentAllowance - amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/mock/rba/interfaces/IDEXFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDEXFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/mock/rba/interfaces/IDEXPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDEXPair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/mock/rba/token/ERC1363/IERC1363Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363Receiver Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n *  from ERC1363 token contracts as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363Receiver {\n    /**\n     * @notice Handle the receipt of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n     * transfer. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param sender address The address which are token transferred from\n     * @param amount uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))` unless throwing\n     */\n    function onTransferReceived(\n        address operator,\n        address sender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/mock/rba/token/ERC1363/IERC1363Spender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363Spender Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support approveAndCall\n *  from ERC1363 token contracts as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363Spender {\n    /**\n     * @notice Handle the approval of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after an `approve`. This function MAY throw to revert and reject the\n     * approval. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param sender address The address which called `approveAndCall` function\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))` unless throwing\n     */\n    function onApprovalReceived(\n        address sender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/mock/MYTEST1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract MYTEST1155 is ERC1155, Ownable {\r\n  constructor() ERC1155(\"https://roburna.com\") {}\r\n\r\n  function mint(\r\n    address account,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) public onlyOwner {\r\n    _mint(account, id, amount, data);\r\n  }\r\n\r\n  function mintBatch(\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) public onlyOwner {\r\n    _mintBatch(to, ids, amounts, data);\r\n  }\r\n}\r\n"
    },
    "contracts/staking/StakingTreasury.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IReflectionsDistributor.sol\";\n\ncontract StakingTreasury is Ownable {\n  address public stakingVault;\n  uint256 public totalStakedBalance;\n  uint256 public minAmountReflection = 1000 * 10**9;\n\n  IReflectionsDistributor public reflectionsDistributor;\n  IERC20 public immutable stakeToken;\n\n  event LogDeposit(address user, uint256 amount);\n  event LogWithdrawal(address user, uint256 amount);\n  event LogSetStakingVault(address stakingVault);\n  event LogSetMinAmountReflection(uint256 minAmountReflection);\n  event LogSetReflectionsDistributor(address reflectionsDistributor);\n\n  constructor(\n    address _stakingVault,\n    IERC20 _stakeToken,\n    IReflectionsDistributor _reflectionsDistributor\n  ) {\n    stakeToken = _stakeToken;\n    stakingVault = _stakingVault;\n    reflectionsDistributor = _reflectionsDistributor;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner or deployer.\n   */\n  modifier onlyStakingVault() {\n    require(_msgSender() == stakingVault, \"StakingTresuary: caller is not the stakingVault\");\n    _;\n  }\n\n  function transferReflections() internal {\n    uint256 reflections = stakeToken.balanceOf(address(this)) - totalStakedBalance;\n\n    /**\n     * @notice Transfers accumulated reflections to the reflectionsDistributor\n     * if the amount is reached\n     */\n    if (reflections >= minAmountReflection) {\n      require(stakeToken.transfer(address(reflectionsDistributor), reflections), \"Transfer fail\");\n    }\n  }\n\n  function deposit(address staker, uint256 amount) external onlyStakingVault {\n    transferReflections();\n\n    require(stakeToken.transferFrom(staker, address(this), amount), \"TransferFrom fail\");\n    totalStakedBalance += amount;\n\n    reflectionsDistributor.deposit(staker, amount);\n\n    emit LogDeposit(staker, amount);\n  }\n\n  function withdraw(address staker, uint256 amount) external onlyStakingVault {\n    transferReflections();\n\n    require(stakeToken.transfer(staker, amount), \"Transfer fail\");\n    totalStakedBalance -= amount;\n\n    reflectionsDistributor.withdraw(staker, amount);\n    emit LogWithdrawal(staker, amount);\n  }\n\n  function setStakingVault(address _stakingVault) external onlyOwner {\n    stakingVault = _stakingVault;\n    emit LogSetStakingVault(stakingVault);\n  }\n\n  function setMinAmountReflection(uint256 _minAmountReflection) external onlyOwner {\n    minAmountReflection = _minAmountReflection;\n    emit LogSetMinAmountReflection(minAmountReflection);\n  }\n\n  function setReflectionsDistributor(IReflectionsDistributor _reflectionsDistributor) external onlyOwner {\n    reflectionsDistributor = _reflectionsDistributor;\n    emit LogSetReflectionsDistributor(address(reflectionsDistributor));\n  }\n}\n"
    },
    "contracts/staking/interfaces/IReflectionsDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IReflectionsDistributor {\n  function deposit(address _user, uint256 _amount) external;\n\n  function withdraw(address _user, uint256 _amount) external;\n}\n"
    },
    "contracts/staking/ReflectionsDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract ReflectionsDistributor is Ownable {\n  /// @notice Info of each user\n  struct UserInfo {\n    uint256 amount;\n    uint256 rewardDebt;\n    /**\n     * @notice We do some fancy math here. Basically, any point in time, the amount of STAKE_TOKENs\n     * entitled to a user but is pending to be distributed is:\n     *\n     *   pending reward = (user.amount * accRewardPerShare) - user.rewardDebt\n     *\n     * Whenever a user deposits or withdraws STAKE_TOKEN. Here's what happens:\n     *   1. accRewardPerShare (and `lastRewardBalance`) gets updated\n     *   2. User receives the pending reward sent to his/her address\n     *   3. User's `amount` gets updated\n     *   4. User's `rewardDebt` gets updated\n     */\n  }\n\n  IERC20 public immutable stakeToken;\n  address public treasury;\n  uint256 public minAmountReflection = 1000 * 10**9;\n\n  /// @notice The precision of `accRewardPerShare`\n  uint256 public immutable ACC_REWARD_PER_SHARE_PRECISION;\n\n  /// @dev Internal balance of STAKE_TOKEN, this gets updated on user deposits / withdrawals\n  /// this allows to reward users with STAKE_TOKEN\n  uint256 public internalArborBalance;\n\n  /// @notice Last reward balance\n  uint256 public lastRewardBalance;\n\n  /// @notice Accumulated rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`\n  uint256 public accRewardPerShare;\n\n  /// @dev Info of each user that stakes STAKE_TOKEN\n  mapping(address => UserInfo) private userInfo;\n\n  event Deposit(address indexed user, uint256 amount);\n  event Withdraw(address indexed user, uint256 amount);\n  event ClaimReward(address indexed user, uint256 amount);\n  event LogSetTreasury(address treasury);\n  event LogSetMinAmountReflection(uint256 minAmountReflection);\n\n  /**\n   * @param _stakeToken The address of the STAKE_TOKEN token\n   */\n  constructor(IERC20 _stakeToken, address _treasury) {\n    stakeToken = _stakeToken;\n    treasury = _treasury;\n\n    ACC_REWARD_PER_SHARE_PRECISION = 1e24;\n  }\n\n  modifier onlyTreasury() {\n    require(_msgSender() == treasury, \"ReflectionsDistributor: caller is not the treasury\");\n    _;\n  }\n\n  /**\n   * @notice Deposit STAKE_TOKEN for reward token allocation\n   * @param _amount The amount of STAKE_TOKEN to deposit\n   */\n  function deposit(address _user, uint256 _amount) external onlyTreasury {\n    UserInfo storage user = userInfo[_user];\n\n    uint256 _previousAmount = user.amount;\n    uint256 _newAmount = user.amount + _amount;\n    user.amount = _newAmount;\n\n    updateReward();\n    uint256 _previousRewardDebt = user.rewardDebt;\n    user.rewardDebt = (_newAmount * accRewardPerShare) / ACC_REWARD_PER_SHARE_PRECISION;\n    if (_previousAmount != 0) {\n      uint256 _pending = (_previousAmount * accRewardPerShare) / ACC_REWARD_PER_SHARE_PRECISION - _previousRewardDebt;\n      if (_pending > 0) {\n        safeTokenTransfer(_user, _pending);\n        emit ClaimReward(_user, _pending);\n      }\n    }\n\n    internalArborBalance += _amount;\n    emit Deposit(_user, _amount);\n  }\n\n  /**\n   * @notice Withdraw STAKE_TOKEN and harvest the rewards\n   * @param _amount The amount of STAKE_TOKEN to withdraw\n   */\n  function withdraw(address _user, uint256 _amount) external onlyTreasury {\n    UserInfo storage user = userInfo[_user];\n\n    uint256 _previousAmount = user.amount;\n    uint256 _newAmount = user.amount - _amount;\n    user.amount = _newAmount;\n\n    updateReward();\n    uint256 _pending = (_previousAmount * accRewardPerShare) / ACC_REWARD_PER_SHARE_PRECISION - user.rewardDebt;\n    user.rewardDebt = (_newAmount * accRewardPerShare) / ACC_REWARD_PER_SHARE_PRECISION;\n    if (_pending > 0) {\n      safeTokenTransfer(_user, _pending);\n      emit ClaimReward(_user, _pending);\n    }\n\n    internalArborBalance -= _amount;\n\n    emit Withdraw(_user, _amount);\n  }\n\n  /**\n   * @notice Update reward variables\n   * @dev Needs to be called before any deposit or withdrawal\n   */\n  function updateReward() internal {\n    uint256 _totalArbor = internalArborBalance;\n\n    uint256 _currRewardBalance = stakeToken.balanceOf(address(this));\n    uint256 _rewardBalance = _currRewardBalance;\n\n    // Did ReflectionsDistributor receive any token\n    if (_rewardBalance >= lastRewardBalance + minAmountReflection && _totalArbor > 0) {\n      uint256 _accruedReward = _rewardBalance - lastRewardBalance;\n\n      accRewardPerShare = accRewardPerShare + (_accruedReward * ACC_REWARD_PER_SHARE_PRECISION) / _totalArbor;\n      lastRewardBalance = _rewardBalance;\n    }\n  }\n\n  /**\n   * @notice Safe token transfer function, just in case if rounding error\n   * causes pool to not have enough reward tokens\n   * @param _to The address that will receive `_amount` `rewardToken`\n   * @param _amount The amount to send to `_to`\n   */\n  function safeTokenTransfer(address _to, uint256 _amount) internal {\n    uint256 _currRewardBalance = stakeToken.balanceOf(address(this));\n    uint256 _rewardBalance = _currRewardBalance;\n\n    if (_amount > _rewardBalance) {\n      lastRewardBalance = lastRewardBalance - _rewardBalance;\n      require(stakeToken.transfer(_to, _rewardBalance), \"Transfer fail\");\n    } else {\n      lastRewardBalance = lastRewardBalance - _amount;\n      require(stakeToken.transfer(_to, _amount), \"Transfer fail\");\n    }\n  }\n\n  function setTreasury(address _treasury) external onlyOwner {\n    treasury = _treasury;\n    emit LogSetTreasury(treasury);\n  }\n\n  function setMinAmountReflection(uint256 _minAmountReflection) external onlyOwner {\n    minAmountReflection = _minAmountReflection;\n    emit LogSetMinAmountReflection(minAmountReflection);\n  }\n\n  /**\n   * @notice Get user info\n   * @param _user The address of the user\n   * @return The amount of STAKE_TOKEN user has deposited\n   * @return The reward debt for the chosen token\n   */\n  function getUserInfo(address _user) external view returns (uint256, uint256) {\n    UserInfo storage user = userInfo[_user];\n    return (user.amount, user.rewardDebt);\n  }\n\n  /**\n   * @notice View function to see pending reward token on frontend\n   * @param _user The address of the user\n   * @return `_user`'s pending reward token\n   */\n  function pendingReward(address _user) external view returns (uint256) {\n    UserInfo storage user = userInfo[_user];\n    uint256 _totalArbor = internalArborBalance;\n    uint256 _accRewardTokenPerShare = accRewardPerShare;\n\n    uint256 _currRewardBalance = stakeToken.balanceOf(address(this));\n    uint256 _rewardBalance = _currRewardBalance;\n\n    if (_rewardBalance >= lastRewardBalance + minAmountReflection && _totalArbor > 0) {\n      uint256 _accruedReward = _rewardBalance - lastRewardBalance;\n      _accRewardTokenPerShare =\n        _accRewardTokenPerShare +\n        (_accruedReward * ACC_REWARD_PER_SHARE_PRECISION) /\n        _totalArbor;\n    }\n    return (user.amount * _accRewardTokenPerShare) / ACC_REWARD_PER_SHARE_PRECISION - user.rewardDebt;\n  }\n}\n"
    },
    "contracts/staking/interfaces/IStakingToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStakingToken is IERC20 {\n  function dividendToken() external view returns (address);\n\n  function withdrawReward(address receiver, uint256 amount) external;\n}\n"
    },
    "contracts/staking/ArborStakingWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IStakingToken.sol\";\n\ncontract ArborStakingWallet is Ownable {\n  IStakingToken public immutable mainToken;\n  address public deployer;\n\n  event LogRewardsWithdrawal(address indexed receiver, uint256 amount);\n  event LogTokenRecovery(address tokenRecovered, uint256 amount);\n\n  constructor(IStakingToken _mainToken, address _stakingContract) {\n    mainToken = _mainToken;\n    deployer = msg.sender;\n    transferOwnership(_stakingContract);\n  }\n\n  modifier onlyOwnerOrDeployer() {\n    require(owner() == _msgSender() || deployer == _msgSender(), \"Ownable: caller is not the owner or deployer\");\n    _;\n  }\n\n  function withdrawReward(address receiver, uint256 _amount) external onlyOwnerOrDeployer {\n    require(mainToken.balanceOf(address(this)) >= _amount, \"Insufficient reward balance\");\n\n    address _dividendToken = IStakingToken(mainToken).dividendToken();\n\n    uint256 amountDividenToWithdraw = _getDividenShare(_amount);\n\n    /**\n     * withdraw dividend\n     */\n    if (amountDividenToWithdraw > 0) {\n      IERC20(_dividendToken).transfer(receiver, _amount);\n    }\n    mainToken.transfer(receiver, _amount);\n    emit LogRewardsWithdrawal(receiver, _amount);\n  }\n\n  function _getDividenShare(uint256 _amount) internal view returns (uint256) {\n    address _dividendToken = IStakingToken(mainToken).dividendToken();\n    uint256 _contractBalance = mainToken.balanceOf(address(this));\n    uint256 _dividendBalance = IERC20(_dividendToken).balanceOf(address(this));\n\n    if (_dividendBalance == 0) {\n      return 0;\n    }\n\n    uint256 amountDividend = (_amount * _dividendBalance) / _contractBalance;\n    return amountDividend;\n  }\n\n  function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwnerOrDeployer {\n    address _dividendToken = IStakingToken(mainToken).dividendToken();\n\n    require(_tokenAddress != address(mainToken), \"Cannot be main token\");\n    require(_tokenAddress != address(_dividendToken), \"Cannot be main dividenToken\");\n\n    IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\n\n    emit LogTokenRecovery(_tokenAddress, _tokenAmount);\n  }\n}\n"
    },
    "contracts/staking/ArborsStakingWithReflection.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./interfaces/IStakingTreasury.sol\";\n\ncontract ArborsStakingWithReflection is Ownable, Pausable {\n  struct StakerInfo {\n    uint256 amount;\n    uint256 startBlock;\n    uint256 stakeRewards;\n  }\n\n  // Staker Info\n  mapping(address => StakerInfo) public staker;\n\n  uint256 public immutable rewardPerBlockTokenN;\n  uint256 public immutable rewardPerBlockTokenD; // Must be greater than zero\n\n  IERC20 public immutable stakeToken;\n  IERC20 public immutable rewardsToken;\n\n  address public TREASURY;\n  address public REWARD_WALLET;\n\n  event LogStake(address indexed from, uint256 amount);\n  event LogUnstake(address indexed from, uint256 amount, uint256 amountRewards);\n  event LogRewardsWithdrawal(address indexed to, uint256 amount);\n  event LogSetTreasury(address indexed newTreasury);\n  event LogSetRewardWallet(address indexed newRewardWallet);\n\n  constructor(\n    IERC20 _stakeToken,\n    IERC20 _rewardsToken,\n    address _treasury,\n    address _rewardWallet,\n    uint256 _rewardPerBlockTokenN,\n    uint256 _rewardPerBlockTokenD\n  ) {\n    stakeToken = _stakeToken;\n    rewardsToken = _rewardsToken;\n    TREASURY = _treasury;\n    REWARD_WALLET = _rewardWallet;\n    rewardPerBlockTokenN = _rewardPerBlockTokenN;\n    rewardPerBlockTokenD = _rewardPerBlockTokenD;\n  }\n\n  function stake(uint256 _amount) external whenNotPaused {\n    require(_amount > 0, \"Staking amount must be greater than zero\");\n\n    require(stakeToken.balanceOf(msg.sender) >= _amount, \"Insufficient stakeToken balance\");\n\n    if (staker[msg.sender].amount > 0) {\n      staker[msg.sender].stakeRewards = getTotalRewards(msg.sender);\n    }\n\n    IStakingTreasury(TREASURY).deposit(msg.sender, _amount);\n\n    staker[msg.sender].amount += _amount;\n    staker[msg.sender].startBlock = block.number;\n    emit LogStake(msg.sender, _amount);\n  }\n\n  function unstake(uint256 _amount) external whenNotPaused {\n    require(_amount > 0, \"Unstaking amount must be greater than zero\");\n    require(staker[msg.sender].amount >= _amount, \"Insufficient unstake\");\n\n    uint256 amountWithdraw = _withdrawRewards();\n    staker[msg.sender].amount -= _amount;\n    staker[msg.sender].startBlock = block.number;\n    staker[msg.sender].stakeRewards = 0;\n\n    IStakingTreasury(TREASURY).withdraw(msg.sender, _amount);\n\n    emit LogUnstake(msg.sender, _amount, amountWithdraw);\n  }\n\n  function _withdrawRewards() internal returns (uint256) {\n    uint256 amountWithdraw = getTotalRewards(msg.sender);\n    if (amountWithdraw > 0) {\n      require(rewardsToken.transferFrom(REWARD_WALLET, msg.sender, amountWithdraw), \"TransferFrom fail\");\n    }\n    return amountWithdraw;\n  }\n\n  function withdrawRewards() external whenNotPaused {\n    uint256 amountWithdraw = _withdrawRewards();\n    require(amountWithdraw > 0, \"Insufficient rewards balance\");\n    staker[msg.sender].startBlock = block.number;\n    staker[msg.sender].stakeRewards = 0;\n\n    emit LogRewardsWithdrawal(msg.sender, amountWithdraw);\n  }\n\n  function getTotalRewards(address _staker) public view returns (uint256) {\n    uint256 newRewards = ((block.number - staker[_staker].startBlock) * staker[_staker].amount * rewardPerBlockTokenN) /\n      rewardPerBlockTokenD;\n    return newRewards + staker[_staker].stakeRewards;\n  }\n\n  function setTreasury(address _tresuary) external onlyOwner {\n    TREASURY = _tresuary;\n    emit LogSetTreasury(TREASURY);\n  }\n\n  function setRewardWallet(address _rewardWallet) external onlyOwner {\n    REWARD_WALLET = _rewardWallet;\n    emit LogSetRewardWallet(REWARD_WALLET);\n  }\n\n  function setPause() external onlyOwner {\n    _pause();\n  }\n\n  function setUnpause() external onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/staking/interfaces/IStakingTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IStakingTreasury {\n  function deposit(address staker, uint256 amount) external;\n\n  function withdraw(address staker, uint256 amount) external;\n}\n"
    },
    "contracts/staking/ArborsStakingWithFixedLockTimeAndReflection.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract ArborsStakingWithFixedLockTimeAndReflection is Ownable, Pausable {\n  struct StakerInfo {\n    uint256 amount;\n    uint256 endTime;\n    uint256 startBlock;\n    uint256 stakeRewards;\n  }\n\n  // Staker Info\n  mapping(address => StakerInfo) public staker;\n\n  uint256 public immutable rewardPerBlockTokenN;\n  uint256 public immutable rewardPerBlockTokenD; // Must be greater than zero\n\n  IERC20 public immutable stakeToken;\n  IERC20 public immutable rewardsToken;\n\n  uint256 public lockTime = 30 days;\n\n  event LogStake(address indexed from, uint256 amount);\n  event LogUnstake(address indexed from, uint256 amount, uint256 amountRewards);\n  event LogRewardsWithdrawal(address indexed to, uint256 amount);\n  event LogSetLockTime(uint256 lockTime);\n\n  constructor(\n    IERC20 _stakeToken,\n    IERC20 _rewardsToken,\n    uint256 _rewardPerBlockTokenN,\n    uint256 _rewardPerBlockTokenD\n  ) {\n    stakeToken = _stakeToken;\n    rewardsToken = _rewardsToken;\n    rewardPerBlockTokenN = _rewardPerBlockTokenN;\n    rewardPerBlockTokenD = _rewardPerBlockTokenD;\n  }\n\n  function stake(uint256 _amount) external whenNotPaused {\n    require(_amount > 0, \"Staking amount must be greater than zero\");\n\n    require(stakeToken.balanceOf(msg.sender) >= _amount, \"Insufficient stakeToken balance\");\n\n    if (staker[msg.sender].amount > 0) {\n      staker[msg.sender].stakeRewards = getTotalRewards(msg.sender);\n    }\n\n    require(stakeToken.transferFrom(msg.sender, address(this), _amount), \"TransferFrom fail\");\n\n    staker[msg.sender].amount += _amount;\n    staker[msg.sender].startBlock = block.number;\n    staker[msg.sender].endTime = block.timestamp + lockTime;\n    emit LogStake(msg.sender, _amount);\n  }\n\n  function unstake(uint256 _amount) external whenNotPaused {\n    require(block.timestamp > staker[msg.sender].endTime, \"Can't unstake yet\");\n    require(_amount > 0, \"Unstaking amount must be greater than zero\");\n    require(staker[msg.sender].amount >= _amount, \"Insufficient unstake\");\n\n    uint256 amountWithdraw = _withdrawRewards();\n    staker[msg.sender].amount -= _amount;\n    staker[msg.sender].startBlock = block.number;\n    staker[msg.sender].stakeRewards = 0;\n\n    require(stakeToken.transfer(msg.sender, _amount), \"TransferFrom fail\");\n    emit LogUnstake(msg.sender, _amount, amountWithdraw);\n  }\n\n  function _withdrawRewards() internal returns (uint256) {\n    uint256 amountWithdraw = getTotalRewards(msg.sender);\n    if (amountWithdraw > 0) {\n      require(stakeToken.transfer(msg.sender, amountWithdraw), \"TransferFrom fail\");\n    }\n    return amountWithdraw;\n  }\n\n  function withdrawRewards() external whenNotPaused {\n    uint256 amountWithdraw = _withdrawRewards();\n    require(amountWithdraw > 0, \"Insufficient rewards balance\");\n    staker[msg.sender].startBlock = block.number;\n    staker[msg.sender].stakeRewards = 0;\n\n    emit LogRewardsWithdrawal(msg.sender, amountWithdraw);\n  }\n\n  function getTotalRewards(address _staker) public view returns (uint256) {\n    uint256 newRewards = ((block.number - staker[_staker].startBlock) * staker[_staker].amount * rewardPerBlockTokenN) /\n      rewardPerBlockTokenD;\n    return newRewards + staker[_staker].stakeRewards;\n  }\n\n  function setLockTime(uint256 _lockTime) external onlyOwner {\n    lockTime = _lockTime;\n    emit LogSetLockTime(lockTime);\n  }\n\n  function setPause() external onlyOwner {\n    _pause();\n  }\n\n  function setUnpause() external onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "contracts/staking/ArborsStakingWithFixedLockTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract ArborsStakingWithFixedLockTime is Ownable, Pausable {\n  struct StakerInfo {\n    uint256 amount;\n    uint256 endTime;\n    uint256 startTime;\n    uint256 stakeRewards;\n  }\n\n  // Staker Info\n  mapping(address => StakerInfo) public staker;\n  uint256 public constant YEAR_SECOND = 31577600;\n\n  IERC20 public immutable stakeToken;\n  IERC20 public immutable rewardsToken;\n\n  uint256 public lockTime;\n  uint256 public rate;\n\n  event LogStake(address indexed from, uint256 amount);\n  event LogUnstake(address indexed from, uint256 amount, uint256 amountRewards);\n  event LogRewardsWithdrawal(address indexed to, uint256 amount);\n  event LogSetLockTime(uint256 lockTime);\n  event LogSetRate(uint256 rate);\n  event LogTokenRecovery(address tokenRecovered, uint256 amount);\n\n  constructor(\n    IERC20 _stakeToken,\n    IERC20 _rewardsToken,\n    uint256 _lockTime,\n    uint256 _rate\n  ) {\n    stakeToken = _stakeToken;\n    rewardsToken = _rewardsToken;\n    lockTime = _lockTime;\n    rate = _rate;\n  }\n\n  function stake(uint256 _amount) external whenNotPaused {\n    require(_amount > 0, \"Staking amount must be greater than zero\");\n\n    require(stakeToken.balanceOf(msg.sender) >= _amount, \"Insufficient stakeToken balance\");\n\n    if (staker[msg.sender].amount > 0) {\n      staker[msg.sender].stakeRewards = getTotalRewards(msg.sender);\n    }\n\n    require(stakeToken.transferFrom(msg.sender, address(this), _amount), \"TransferFrom fail\");\n\n    staker[msg.sender].amount += _amount;\n    staker[msg.sender].startTime = block.timestamp;\n    staker[msg.sender].endTime = block.timestamp + (lockTime * 1 days);\n    emit LogStake(msg.sender, _amount);\n  }\n\n  function unstake(uint256 _amount) external whenNotPaused {\n    require(block.timestamp > staker[msg.sender].endTime, \"Can't unstake yet\");\n    require(_amount > 0, \"Unstaking amount must be greater than zero\");\n    require(staker[msg.sender].amount >= _amount, \"Insufficient unstake\");\n\n    uint256 amountWithdraw = _withdrawRewards();\n    staker[msg.sender].amount -= _amount;\n    staker[msg.sender].startTime = block.timestamp;\n    staker[msg.sender].stakeRewards = 0;\n\n    require(stakeToken.transfer(msg.sender, _amount), \"TransferFrom fail\");\n\n    emit LogUnstake(msg.sender, _amount, amountWithdraw);\n  }\n\n  function _withdrawRewards() internal returns (uint256) {\n    uint256 amountWithdraw = getTotalRewards(msg.sender);\n    if (amountWithdraw > 0) {\n      require(rewardsToken.transfer(msg.sender, amountWithdraw), \"TransferFrom fail\");\n    }\n    return amountWithdraw;\n  }\n\n  function withdrawRewards() external whenNotPaused {\n    uint256 amountWithdraw = _withdrawRewards();\n    require(amountWithdraw > 0, \"Insufficient rewards balance\");\n    staker[msg.sender].startTime = block.timestamp;\n    staker[msg.sender].stakeRewards = 0;\n\n    emit LogRewardsWithdrawal(msg.sender, amountWithdraw);\n  }\n\n  function getTotalRewards(address _staker) public view returns (uint256) {\n    uint256 newRewards = ((block.timestamp - staker[_staker].startTime) * staker[_staker].amount * rate) /\n      (YEAR_SECOND * 100);\n    return newRewards + staker[_staker].stakeRewards;\n  }\n\n  function getPendingRewards(address _staker) public view returns (uint256) {\n    return staker[_staker].stakeRewards;\n  }\n\n  function calculateRewards(uint256 _start, uint256 _amount) public view returns (uint256) {\n    uint256 newRewards = ((block.timestamp - _start) * _amount * rate) / (YEAR_SECOND * 100);\n    return newRewards;\n  }\n\n  function calculateDayRewards(uint256 _start, uint256 _amount) public view returns (uint256) {\n    uint256 newRewards = ((_start * 1 days) * _amount * rate) / (YEAR_SECOND * 100);\n    return newRewards;\n  }\n\n  function setLockTime(uint256 _lockTime) external onlyOwner {\n    lockTime = _lockTime;\n    emit LogSetLockTime(lockTime);\n  }\n\n  function setRate(uint256 _rate) external onlyOwner {\n    rate = _rate;\n    emit LogSetRate(rate);\n  }\n\n  function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n    require(_tokenAddress != address(stakeToken), \"Cannot be staked token\");\n    require(_tokenAddress != address(rewardsToken), \"Cannot be reward token\");\n\n    IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\n\n    emit LogTokenRecovery(_tokenAddress, _tokenAmount);\n  }\n\n  function setPause() external onlyOwner {\n    _pause();\n  }\n\n  function setUnpause() external onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "contracts/staking/ArborsStakingWithDividendAndFixedLockTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./interfaces/IStakingWallet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract ArborsStakingWithDividendAndFixedLockTime is Ownable, Pausable {\n  struct StakerInfo {\n    uint256 amount;\n    uint256 endTime;\n    uint256 startTime;\n    uint256 stakeRewards;\n  }\n\n  // Staker Info\n  mapping(address => StakerInfo) public staker;\n  uint256 public constant YEAR_SECOND = 31577600;\n\n  IERC20 public immutable stakeToken;\n  IERC20 public immutable rewardsToken;\n\n  IStakingWallet public rewardWallet;\n  IStakingWallet public depositWallet;\n\n  uint256 public lockTime;\n  uint256 public rate;\n\n  event LogStake(address indexed from, uint256 amount);\n  event LogUnstake(address indexed from, uint256 amount, uint256 amountRewards);\n  event LogRewardsWithdrawal(address indexed to, uint256 amount);\n  event LogSetLockTime(uint256 lockTime);\n  event LogSetRate(uint256 rate);\n  event LogTokenRecovery(address tokenRecovered, uint256 amount);\n  event LogChangeRewardWallet(IStakingWallet _old, IStakingWallet _new);\n  event LogChangeDepositWallet(IStakingWallet _old, IStakingWallet _new);\n\n  event LogFillReward(address filler, uint256 amount);\n\n  constructor(\n    IERC20 _stakeToken,\n    IERC20 _rewardsToken,\n    uint256 _lockTime,\n    uint256 _rate\n  ) {\n    stakeToken = _stakeToken;\n    rewardsToken = _rewardsToken;\n    lockTime = _lockTime;\n    rate = _rate;\n  }\n\n  function setRewardWallet(IStakingWallet _addr) external onlyOwner {\n    emit LogChangeRewardWallet(rewardWallet, _addr);\n    rewardWallet = _addr;\n  }\n\n  function setDepositWallet(IStakingWallet _addr) external onlyOwner {\n    emit LogChangeDepositWallet(depositWallet, _addr);\n    depositWallet = _addr;\n  }\n\n  function stake(uint256 _amount) external whenNotPaused {\n    require(address(rewardWallet) != address(0), \"Reward Wallet not Set\");\n    require(address(depositWallet) != address(0), \"Deposit Wallet not Set\");\n    require(_amount > 0, \"Staking amount must be greater than zero\");\n    require(stakeToken.balanceOf(msg.sender) >= _amount, \"Insufficient stakeToken balance\");\n    require(stakeToken.allowance(msg.sender, address(this)) >= _amount, \"Insufficient allowance.\");\n\n    if (staker[msg.sender].amount > 0) {\n      staker[msg.sender].stakeRewards = getTotalRewards(msg.sender);\n    }\n\n    stakeToken.transferFrom(msg.sender, address(depositWallet), _amount);\n\n    staker[msg.sender].amount += _amount;\n    staker[msg.sender].startTime = block.timestamp;\n    staker[msg.sender].endTime = block.timestamp + (lockTime * 1 days);\n    emit LogStake(msg.sender, _amount);\n  }\n\n  function unstake(uint256 _amount) external whenNotPaused {\n    require(block.timestamp > staker[msg.sender].endTime, \"Can't unstake yet\");\n    require(_amount > 0, \"Unstaking amount must be greater than zero\");\n    require(staker[msg.sender].amount >= _amount, \"Insufficient unstake\");\n\n    uint256 amountWithdraw = _withdrawRewards();\n    staker[msg.sender].amount -= _amount;\n    staker[msg.sender].startTime = block.timestamp;\n    staker[msg.sender].stakeRewards = 0;\n\n    depositWallet.withdrawReward(msg.sender, _amount);\n\n    emit LogUnstake(msg.sender, _amount, amountWithdraw);\n  }\n\n  function fillRewards(uint256 _amount) external whenNotPaused {\n    require(address(rewardWallet) != address(0), \"Reward Wallet not Set\");\n    require(_amount > 0, \"reward amount must be greater than zero\");\n    require(rewardsToken.balanceOf(msg.sender) >= _amount, \"Insufficient rewardsToken balance\");\n\n    require(rewardsToken.transferFrom(msg.sender, address(rewardWallet), _amount), \"TransferFrom fail\");\n    emit LogFillReward(msg.sender, _amount);\n  }\n\n  function _withdrawRewards() internal returns (uint256) {\n    uint256 amountWithdraw = getTotalRewards(msg.sender);\n    if (amountWithdraw > 0) {\n      rewardWallet.withdrawReward(msg.sender, amountWithdraw);\n    }\n    return amountWithdraw;\n  }\n\n  function withdrawRewards() external whenNotPaused {\n    uint256 amountWithdraw = _withdrawRewards();\n    require(amountWithdraw > 0, \"Insufficient rewards balance\");\n    staker[msg.sender].startTime = block.timestamp;\n    staker[msg.sender].stakeRewards = 0;\n\n    emit LogRewardsWithdrawal(msg.sender, amountWithdraw);\n  }\n\n  function getTotalRewards(address _staker) public view returns (uint256) {\n    uint256 newRewards = ((block.timestamp - staker[_staker].startTime) * staker[_staker].amount * rate) /\n      (YEAR_SECOND * 100);\n    return newRewards + staker[_staker].stakeRewards;\n  }\n\n  function getPendingRewards(address _staker) public view returns (uint256) {\n    return staker[_staker].stakeRewards;\n  }\n\n  function calculateRewards(uint256 _start, uint256 _amount) public view returns (uint256) {\n    uint256 newRewards = ((block.timestamp - _start) * _amount * rate) / (YEAR_SECOND * 100);\n    return newRewards;\n  }\n\n  function calculateDayRewards(uint256 _start, uint256 _amount) public view returns (uint256) {\n    uint256 newRewards = ((_start * 1 days) * _amount * rate) / (YEAR_SECOND * 100);\n    return newRewards;\n  }\n\n  function setLockTime(uint256 _lockTime) external onlyOwner {\n    lockTime = _lockTime;\n    emit LogSetLockTime(lockTime);\n  }\n\n  function setRate(uint256 _rate) external onlyOwner {\n    rate = _rate;\n    emit LogSetRate(rate);\n  }\n\n  function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n    require(_tokenAddress != address(stakeToken), \"Cannot be staked token\");\n    require(_tokenAddress != address(rewardsToken), \"Cannot be reward token\");\n\n    IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\n\n    emit LogTokenRecovery(_tokenAddress, _tokenAmount);\n  }\n\n  function setPause() external onlyOwner {\n    _pause();\n  }\n\n  function setUnpause() external onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "contracts/staking/interfaces/IStakingWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStakingWallet is IERC20 {\n  function withdrawReward(address receiver, uint256 amount) external;\n}\n"
    },
    "contracts/staking/ArborsStakingWithDividend.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport \"./interfaces/IStakingWallet.sol\";\n\ncontract ArborsStakingWithDividend is Ownable, Pausable {\n  struct StakerInfo {\n    uint256 amount;\n    uint256 startTime;\n    uint256 stakeRewards;\n  }\n\n  // Staker Info\n  mapping(address => StakerInfo) public staker;\n\n  uint256 public constant YEAR_SECOND = 31577600;\n\n  uint256 public rate;\n\n  IERC20 public immutable stakeToken;\n  IERC20 public immutable rewardsToken;\n\n  IStakingWallet public rewardWallet;\n  IStakingWallet public depositWallet;\n\n  event LogStake(address indexed from, uint256 amount);\n  event LogUnstake(address indexed from, uint256 amount, uint256 amountRewards);\n  event LogRewardsWithdrawal(address indexed to, uint256 amount);\n  event LogSetRate(uint256 rate);\n  event LogTokenRecovery(address tokenRecovered, uint256 amount);\n\n  event LogChangeRewardWallet(IStakingWallet _old, IStakingWallet _new);\n  event LogChangeDepositWallet(IStakingWallet _old, IStakingWallet _new);\n  event LogFillReward(address filler, uint256 amount);\n\n  constructor(\n    IERC20 _stakeToken,\n    IERC20 _rewardsToken,\n    uint256 _rate\n  ) {\n    stakeToken = _stakeToken;\n    rewardsToken = _rewardsToken;\n    rate = _rate;\n  }\n\n  function setRewardWallet(IStakingWallet _addr) external onlyOwner {\n    emit LogChangeRewardWallet(rewardWallet, _addr);\n    rewardWallet = _addr;\n  }\n\n  function setDepositWallet(IStakingWallet _addr) external onlyOwner {\n    emit LogChangeDepositWallet(depositWallet, _addr);\n    depositWallet = _addr;\n  }\n\n  function stake(uint256 _amount) external whenNotPaused {\n    require(address(rewardWallet) != address(0), \"Reward Wallet not Set\");\n    require(address(depositWallet) != address(0), \"Deposit Wallet not Set\");\n\n    require(_amount > 0, \"Staking amount must be greater than zero\");\n    require(stakeToken.allowance(msg.sender, address(this)) >= _amount, \"Insufficient allowance.\");\n\n    require(stakeToken.balanceOf(msg.sender) >= _amount, \"Insufficient stakeToken balance\");\n\n    if (staker[msg.sender].amount > 0) {\n      staker[msg.sender].stakeRewards = getTotalRewards(msg.sender);\n    }\n\n    stakeToken.transferFrom(msg.sender, address(depositWallet), _amount);\n\n    staker[msg.sender].amount += _amount;\n    staker[msg.sender].startTime = block.timestamp;\n    emit LogStake(msg.sender, _amount);\n  }\n\n  function unstake(uint256 _amount) external whenNotPaused {\n    require(_amount > 0, \"Unstaking amount must be greater than zero\");\n    require(staker[msg.sender].amount >= _amount, \"Insufficient unstake\");\n\n    uint256 amountWithdraw = _withdrawRewards();\n    staker[msg.sender].amount -= _amount;\n    staker[msg.sender].startTime = block.timestamp;\n    staker[msg.sender].stakeRewards = 0;\n\n    depositWallet.withdrawReward(msg.sender, _amount);\n\n    emit LogUnstake(msg.sender, _amount, amountWithdraw);\n  }\n\n  function fillRewards(uint256 _amount) external whenNotPaused {\n    require(address(rewardWallet) != address(0), \"Reward Wallet not Set\");\n    require(_amount > 0, \"reward amount must be greater than zero\");\n    require(rewardsToken.balanceOf(msg.sender) >= _amount, \"Insufficient rewardsToken balance\");\n\n    require(rewardsToken.transferFrom(msg.sender, address(rewardWallet), _amount), \"TransferFrom fail\");\n    emit LogFillReward(msg.sender, _amount);\n  }\n\n  function _withdrawRewards() internal returns (uint256) {\n    uint256 amountWithdraw = getTotalRewards(msg.sender);\n    if (amountWithdraw > 0) {\n      rewardWallet.withdrawReward(msg.sender, amountWithdraw);\n    }\n    return amountWithdraw;\n  }\n\n  function withdrawRewards() external whenNotPaused {\n    uint256 amountWithdraw = _withdrawRewards();\n    require(amountWithdraw > 0, \"Insufficient rewards balance\");\n    staker[msg.sender].startTime = block.timestamp;\n    staker[msg.sender].stakeRewards = 0;\n\n    emit LogRewardsWithdrawal(msg.sender, amountWithdraw);\n  }\n\n  function getTotalRewards(address _staker) public view returns (uint256) {\n    uint256 newRewards = ((block.timestamp - staker[_staker].startTime) * staker[_staker].amount * rate) /\n      (YEAR_SECOND * 100);\n    return newRewards + staker[_staker].stakeRewards;\n  }\n\n  function calculateRewards(uint256 _start, uint256 _amount) public view returns (uint256) {\n    uint256 newRewards = ((block.timestamp - _start) * _amount * rate) / (YEAR_SECOND * 100);\n    return newRewards;\n  }\n\n  function calculateDayRewards(uint256 _start, uint256 _amount) public view returns (uint256) {\n    uint256 newRewards = ((_start * 1 days) * _amount * rate) / (YEAR_SECOND * 100);\n    return newRewards;\n  }\n\n  function getPendingRewards(address _staker) public view returns (uint256) {\n    return staker[_staker].stakeRewards;\n  }\n\n  function setRate(uint256 _rate) external onlyOwner {\n    rate = _rate;\n    emit LogSetRate(rate);\n  }\n\n  function setPause() external onlyOwner {\n    _pause();\n  }\n\n  function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n    require(_tokenAddress != address(stakeToken), \"Cannot be staked token\");\n    require(_tokenAddress != address(rewardsToken), \"Cannot be reward token\");\n\n    IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\n\n    emit LogTokenRecovery(_tokenAddress, _tokenAmount);\n  }\n\n  function setUnpause() external onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "contracts/staking/ArborsStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract ArborsStaking is Ownable, Pausable {\n  struct StakerInfo {\n    uint256 amount;\n    uint256 startTime;\n    uint256 stakeRewards;\n  }\n\n  // Staker Info\n  mapping(address => StakerInfo) public staker;\n\n  uint256 public constant YEAR_SECOND = 31577600;\n\n  uint256 public rate;\n\n  IERC20 public immutable stakeToken;\n  IERC20 public immutable rewardsToken;\n\n  event LogStake(address indexed from, uint256 amount);\n  event LogUnstake(address indexed from, uint256 amount, uint256 amountRewards);\n  event LogRewardsWithdrawal(address indexed to, uint256 amount);\n  event LogSetRate(uint256 rate);\n  event LogTokenRecovery(address tokenRecovered, uint256 amount);\n\n  constructor(\n    IERC20 _stakeToken,\n    IERC20 _rewardsToken,\n    uint256 _rate\n  ) {\n    stakeToken = _stakeToken;\n    rewardsToken = _rewardsToken;\n    rate = _rate;\n  }\n\n  function stake(uint256 _amount) external whenNotPaused {\n    require(_amount > 0, \"Staking amount must be greater than zero\");\n\n    require(stakeToken.balanceOf(msg.sender) >= _amount, \"Insufficient stakeToken balance\");\n\n    if (staker[msg.sender].amount > 0) {\n      staker[msg.sender].stakeRewards = getTotalRewards(msg.sender);\n    }\n\n    require(stakeToken.transferFrom(msg.sender, address(this), _amount), \"TransferFrom fail\");\n\n    staker[msg.sender].amount += _amount;\n    staker[msg.sender].startTime = block.timestamp;\n    emit LogStake(msg.sender, _amount);\n  }\n\n  function unstake(uint256 _amount) external whenNotPaused {\n    require(_amount > 0, \"Unstaking amount must be greater than zero\");\n    require(staker[msg.sender].amount >= _amount, \"Insufficient unstake\");\n\n    uint256 amountWithdraw = _withdrawRewards();\n    staker[msg.sender].amount -= _amount;\n    staker[msg.sender].startTime = block.timestamp;\n    staker[msg.sender].stakeRewards = 0;\n\n    require(stakeToken.transfer(msg.sender, _amount), \"TransferFrom fail\");\n\n    emit LogUnstake(msg.sender, _amount, amountWithdraw);\n  }\n\n  function _withdrawRewards() internal returns (uint256) {\n    uint256 amountWithdraw = getTotalRewards(msg.sender);\n    if (amountWithdraw > 0) {\n      require(rewardsToken.transfer(msg.sender, amountWithdraw), \"TransferFrom fail\");\n    }\n    return amountWithdraw;\n  }\n\n  function withdrawRewards() external whenNotPaused {\n    uint256 amountWithdraw = _withdrawRewards();\n    require(amountWithdraw > 0, \"Insufficient rewards balance\");\n    staker[msg.sender].startTime = block.timestamp;\n    staker[msg.sender].stakeRewards = 0;\n\n    emit LogRewardsWithdrawal(msg.sender, amountWithdraw);\n  }\n\n  function getTotalRewards(address _staker) public view returns (uint256) {\n    uint256 newRewards = ((block.timestamp - staker[_staker].startTime) * staker[_staker].amount * rate) /\n      (YEAR_SECOND * 100);\n    return newRewards + staker[_staker].stakeRewards;\n  }\n\n  function calculateRewards(uint256 _start, uint256 _amount) public view returns (uint256) {\n    uint256 newRewards = ((block.timestamp - _start) * _amount * rate) / (YEAR_SECOND * 100);\n    return newRewards;\n  }\n\n  function calculateDayRewards(uint256 _start, uint256 _amount) public view returns (uint256) {\n    uint256 newRewards = ((_start * 1 days) * _amount * rate) / (YEAR_SECOND * 100);\n    return newRewards;\n  }\n\n  function getPendingRewards(address _staker) public view returns (uint256) {\n    return staker[_staker].stakeRewards;\n  }\n\n  function setRate(uint256 _rate) external onlyOwner {\n    rate = _rate;\n    emit LogSetRate(rate);\n  }\n\n  function setPause() external onlyOwner {\n    _pause();\n  }\n\n  function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n    require(_tokenAddress != address(stakeToken), \"Cannot be staked token\");\n    require(_tokenAddress != address(rewardsToken), \"Cannot be reward token\");\n\n    IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\n\n    emit LogTokenRecovery(_tokenAddress, _tokenAmount);\n  }\n\n  function setUnpause() external onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "contracts/farming/ArborsFarming.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract ArborsFarming is Ownable, Pausable {\n  struct StakerInfo {\n    uint256 amount;\n    uint256 startBlock;\n    uint256 stakeRewards;\n  }\n\n  // Staker Info\n  mapping(address => StakerInfo) public staker;\n\n  uint256 public immutable rewardPerBlockTokenN;\n  uint256 public immutable rewardPerBlockTokenD; // Must be greater than zero\n\n  IERC20 public immutable lpToken;\n  IERC20 public immutable rewardsToken;\n\n  address public TREASURY;\n  address public REWARD_WALLET;\n\n  event LogStake(address indexed from, uint256 amount);\n  event LogUnstake(address indexed from, uint256 amount, uint256 amountRewards);\n  event LogRewardsWithdrawal(address indexed to, uint256 amount);\n  event LogSetTreasury(address indexed newTreasury);\n  event LogSetRewardWallet(address indexed newRewardWallet);\n\n  constructor(\n    IERC20 _lpToken,\n    IERC20 _rewardsToken,\n    address _treasury,\n    address _rewardWallet,\n    uint256 _rewardPerBlockTokenN,\n    uint256 _rewardPerBlockTokenD\n  ) {\n    lpToken = _lpToken;\n    rewardsToken = _rewardsToken;\n    TREASURY = _treasury;\n    REWARD_WALLET = _rewardWallet;\n    rewardPerBlockTokenN = _rewardPerBlockTokenN;\n    rewardPerBlockTokenD = _rewardPerBlockTokenD;\n  }\n\n  function stake(uint256 _amount) external whenNotPaused {\n    require(_amount > 0, \"Staking amount must be greater than zero\");\n\n    require(lpToken.balanceOf(msg.sender) >= _amount, \"Insufficient lpToken balance\");\n\n    if (staker[msg.sender].amount > 0) {\n      staker[msg.sender].stakeRewards = getTotalRewards(msg.sender);\n    }\n\n    require(lpToken.transferFrom(msg.sender, TREASURY, _amount), \"TransferFrom fail\");\n\n    staker[msg.sender].amount += _amount;\n    staker[msg.sender].startBlock = block.number;\n    emit LogStake(msg.sender, _amount);\n  }\n\n  function unstake(uint256 _amount) external whenNotPaused {\n    require(_amount > 0, \"Unstaking amount must be greater than zero\");\n    require(staker[msg.sender].amount >= _amount, \"Insufficient unstake\");\n\n    uint256 amountWithdraw = _withdrawRewards();\n    staker[msg.sender].amount -= _amount;\n    staker[msg.sender].startBlock = block.number;\n    staker[msg.sender].stakeRewards = 0;\n\n    require(lpToken.transferFrom(TREASURY, msg.sender, _amount), \"TransferFrom fail\");\n\n    emit LogUnstake(msg.sender, _amount, amountWithdraw);\n  }\n\n  function _withdrawRewards() internal returns (uint256) {\n    uint256 amountWithdraw = getTotalRewards(msg.sender);\n    if (amountWithdraw > 0) {\n      require(rewardsToken.transferFrom(REWARD_WALLET, msg.sender, amountWithdraw), \"TransferFrom fail\");\n    }\n    return amountWithdraw;\n  }\n\n  function withdrawRewards() external whenNotPaused {\n    uint256 amountWithdraw = _withdrawRewards();\n    require(amountWithdraw > 0, \"Insufficient rewards balance\");\n    staker[msg.sender].startBlock = block.number;\n    staker[msg.sender].stakeRewards = 0;\n\n    emit LogRewardsWithdrawal(msg.sender, amountWithdraw);\n  }\n\n  function getTotalRewards(address _staker) public view returns (uint256) {\n    uint256 newRewards = ((block.number - staker[_staker].startBlock) * staker[_staker].amount * rewardPerBlockTokenN) /\n      rewardPerBlockTokenD;\n    return newRewards + staker[_staker].stakeRewards;\n  }\n\n  function setTreasury(address _tresuary) external onlyOwner {\n    TREASURY = _tresuary;\n    emit LogSetTreasury(TREASURY);\n  }\n\n  function setRewardWallet(address _rewardWallet) external onlyOwner {\n    REWARD_WALLET = _rewardWallet;\n    emit LogSetRewardWallet(REWARD_WALLET);\n  }\n\n  function setPause() external onlyOwner {\n    _pause();\n  }\n\n  function setUnpause() external onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "contracts/farming/ArborFarmingWithFixedLockTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract ArborsFarmingWithFixedLockTime is Ownable, Pausable {\n  struct StakerInfo {\n    uint256 amount;\n    uint256 endTime;\n    uint256 startBlock;\n    uint256 stakeRewards;\n  }\n\n  // Staker Info\n  mapping(address => StakerInfo) public staker;\n\n  uint256 public immutable rewardPerBlockTokenN;\n  uint256 public immutable rewardPerBlockTokenD; // Must be greater than zero\n\n  IERC20 public immutable lpToken;\n  IERC20 public immutable rewardsToken;\n\n  uint256 public lockTime = 30 days;\n\n  address public TREASURY;\n  address public REWARD_WALLET;\n\n  event LogStake(address indexed from, uint256 amount);\n  event LogUnstake(address indexed from, uint256 amount, uint256 amountRewards);\n  event LogRewardsWithdrawal(address indexed to, uint256 amount);\n  event LogSetTreasury(address indexed newTreasury);\n  event LogSetRewardWallet(address indexed newRewardWallet);\n  event LogSetLockTime(uint256 lockTime);\n\n  constructor(\n    IERC20 _lpToken,\n    IERC20 _rewardsToken,\n    address _treasury,\n    address _rewardWallet,\n    uint256 _rewardPerBlockTokenN,\n    uint256 _rewardPerBlockTokenD\n  ) {\n    lpToken = _lpToken;\n    rewardsToken = _rewardsToken;\n    TREASURY = _treasury;\n    REWARD_WALLET = _rewardWallet;\n    rewardPerBlockTokenN = _rewardPerBlockTokenN;\n    rewardPerBlockTokenD = _rewardPerBlockTokenD;\n  }\n\n  function stake(uint256 _amount) external whenNotPaused {\n    require(_amount > 0, \"Staking amount must be greater than zero\");\n\n    require(lpToken.balanceOf(msg.sender) >= _amount, \"Insufficient lpToken balance\");\n\n    if (staker[msg.sender].amount > 0) {\n      staker[msg.sender].stakeRewards = getTotalRewards(msg.sender);\n    }\n\n    require(lpToken.transferFrom(msg.sender, TREASURY, _amount), \"TransferFrom fail\");\n\n    staker[msg.sender].amount += _amount;\n    staker[msg.sender].startBlock = block.number;\n    staker[msg.sender].endTime = block.timestamp + lockTime;\n    emit LogStake(msg.sender, _amount);\n  }\n\n  function unstake(uint256 _amount) external whenNotPaused {\n    require(block.timestamp > staker[msg.sender].endTime, \"Can't unstake yet\");\n    require(_amount > 0, \"Unstaking amount must be greater than zero\");\n    require(staker[msg.sender].amount >= _amount, \"Insufficient unstake\");\n\n    uint256 amountWithdraw = _withdrawRewards();\n    staker[msg.sender].amount -= _amount;\n    staker[msg.sender].startBlock = block.number;\n    staker[msg.sender].stakeRewards = 0;\n\n    require(lpToken.transferFrom(TREASURY, msg.sender, _amount), \"TransferFrom fail\");\n\n    emit LogUnstake(msg.sender, _amount, amountWithdraw);\n  }\n\n  function _withdrawRewards() internal returns (uint256) {\n    uint256 amountWithdraw = getTotalRewards(msg.sender);\n    if (amountWithdraw > 0) {\n      require(rewardsToken.transferFrom(REWARD_WALLET, msg.sender, amountWithdraw), \"TransferFrom fail\");\n    }\n    return amountWithdraw;\n  }\n\n  function withdrawRewards() external whenNotPaused {\n    uint256 amountWithdraw = _withdrawRewards();\n    require(amountWithdraw > 0, \"Insufficient rewards balance\");\n    staker[msg.sender].startBlock = block.number;\n    staker[msg.sender].stakeRewards = 0;\n\n    emit LogRewardsWithdrawal(msg.sender, amountWithdraw);\n  }\n\n  function getTotalRewards(address _staker) public view returns (uint256) {\n    uint256 newRewards = ((block.number - staker[_staker].startBlock) * staker[_staker].amount * rewardPerBlockTokenN) /\n      rewardPerBlockTokenD;\n    return newRewards + staker[_staker].stakeRewards;\n  }\n\n  function setTreasury(address _treasury) external onlyOwner {\n    TREASURY = _treasury;\n    emit LogSetTreasury(TREASURY);\n  }\n\n  function setRewardWallet(address _rewardWallet) external onlyOwner {\n    REWARD_WALLET = _rewardWallet;\n    emit LogSetRewardWallet(REWARD_WALLET);\n  }\n\n  function setLockTime(uint256 _lockTime) external onlyOwner {\n    lockTime = _lockTime;\n    emit LogSetLockTime(lockTime);\n  }\n\n  function setPause() external onlyOwner {\n    _pause();\n  }\n\n  function setUnpause() external onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/mock/Generated.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract Generated is ERC20 {\r\n  constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\r\n    _mint(msg.sender, 10**30);\r\n  }\r\n}\r\n"
    },
    "contracts/mock/fight/token/interfaces/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IBEP20 is IERC20, IERC20Metadata {\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n}\n"
    },
    "contracts/mock/fight/IFight4HopeDividendTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./token/interfaces/IBEP20.sol\";\nimport \"./token/interfaces/IDividendPayingTokenInterface.sol\";\nimport \"./token/interfaces/IDividendPayingTokenOptionalInterface.sol\";\nimport \"./token/interfaces/IERC20TokenRecover.sol\";\n\ninterface IFight4HopeDividendTracker is\n    IBEP20,\n    IDividendPayingTokenInterface,\n    IDividendPayingTokenOptionalInterface,\n    IERC20TokenRecover\n{\n    function lastProcessedIndex() external view returns (uint256);\n\n    function excludedFromDividends(address account) external view returns (bool);\n\n    function lastClaimTimes(address account) external view returns (uint256);\n\n    function deployer() external view returns (address);\n\n    function claimWait() external view returns (uint256);\n\n    function minimumTokenBalanceForDividends() external view returns (uint256);\n\n    event ExcludeFromDividends(address indexed account);\n    event IncludedInDividends(address indexed account);\n\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\n\n    function excludeFromDividends(address account) external;\n\n    function includeInDividends(address account) external;\n\n    function updateClaimWait(uint256 newClaimWait) external;\n\n    function updateMinTokenBalance(uint256 minTokens) external;\n\n    function getLastProcessedIndex() external view returns (uint256);\n\n    function getNumberOfTokenHolders() external view returns (uint256);\n\n    function getAccount(address _account)\n        external\n        view\n        returns (\n            address account,\n            int256 index,\n            int256 iterationsUntilProcessed,\n            uint256 withdrawableDividends,\n            uint256 totalDividends,\n            uint256 lastClaimTime,\n            uint256 nextClaimTime,\n            uint256 secondsUntilAutoClaimAvailable\n        );\n\n    function getAccountAtIndex(uint256 index)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function ensureBalance(bool _process) external;\n\n    function ensureBalanceForUsers(address payable[] memory accounts, bool _process) external;\n\n    function ensureBalanceForUser(address payable account, bool _process) external;\n\n    function setBalance(address payable account, uint256 newBalance) external;\n\n    function process(uint256 gas)\n        external\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function processAccount(address payable account, bool automatic) external returns (bool);\n}\n"
    },
    "contracts/mock/fight/token/interfaces/IDividendPayingTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDividendPayingTokenInterface {\n    function dividendToken() external view returns(address);\n\n    function totalDividendsDistributed() external view returns(uint256);\n\n    /**\n     * @notice View the amount of dividend in wei that an address can withdraw.\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` can withdraw.\n     */\n    function dividendOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice Withdraws the ether distributed to the sender.\n     * @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` \n     *      SHOULD be 0 after the transfer.\n     *      MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\n     */\n    function withdrawDividend() external;\n\n    function distributeDividends(uint256 amount) external;\n\n    /**\n     * @dev This event MUST emit when ether is distributed to token holders.\n     * @param from The address which sends ether to this contract.\n     * @param weiAmount The amount of distributed ether in wei.\n     */\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\n\n    /**\n     * @dev This event MUST emit when an address withdraws their dividend.\n     * @param to The address which withdraws ether from this contract.\n     * @param weiAmount The amount of withdrawn ether in wei.\n     */\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\n}\n"
    },
    "contracts/mock/fight/token/interfaces/IDividendPayingTokenOptionalInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDividendPayingTokenOptionalInterface {\n    /**\n     * @notice View the amount of dividend in wei that an address can withdraw.\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` can withdraw.\n     */\n    function withdrawableDividendOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice View the amount of dividend in wei that an address has withdrawn.\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` has withdrawn.\n     */\n    function withdrawnDividendOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice View the amount of dividend in wei that an address has earned in total.\n     * @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` has earned in total.\n     */\n    function accumulativeDividendOf(address _owner) external view returns (uint256);\n}\n"
    },
    "contracts/mock/fight/token/interfaces/IERC20TokenRecover.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC20TokenRecover\n * @dev Allows owner to recover any ERC20 or ETH sent into the contract\n * based on https://github.com/vittominacori/eth-token-recover by Vittorio Minacori\n */\ninterface IERC20TokenRecover {\n    /**\n     * @notice function that transfers an token amount from this contract to the owner when accidentally sent\n     * @param tokenAddress The token contract address\n     * @param tokenAmount Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\n\n    /**\n     * @notice function that transfers an eth amount from this contract to the owner when accidentally sent\n     * @param amount Number of eth to be sent\n     */\n    function recoverETH(uint256 amount) external;\n}\n"
    },
    "contracts/mock/fight/Fight4HopeDividendTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./libraries/IterableMapping.sol\";\nimport \"./token/DividendPayingToken.sol\";\nimport \"./token/extensions/ERC20TokenRecover.sol\";\nimport \"./IFight4HopeDividendTracker.sol\";\n\ncontract Fight4HopeDividendTracker is Ownable, DividendPayingToken, ERC20TokenRecover, IFight4HopeDividendTracker {\n    using IterableMapping for IterableMapping.Map;\n\n    address public parentToken;\n\n    IterableMapping.Map private tokenHoldersMap;\n    uint256 public override lastProcessedIndex;\n\n    mapping(address => bool) public override excludedFromDividends;\n\n    mapping(address => uint256) public override lastClaimTimes;\n\n    address public override deployer;\n\n    uint256 public override claimWait;\n    uint256 public override minimumTokenBalanceForDividends;\n\n    event LogUpdateDeployerAddress(address newDeployer);\n    event LogUpdateMinTokenBalance(uint256 newMinToken);\n\n    /**\n     * @dev Throws if called by any account other than the owner or deployer.\n     */\n    modifier onlyOwnerOrDeployer() {\n        require(owner() == _msgSender() || deployer == _msgSender(), \"Ownable: caller is not the owner or deployer\");\n        _;\n    }\n\n    constructor(address dividendToken, address _parentToken)\n        DividendPayingToken(\"Fight4Hope Dividend Tracker\", \"F4HDT\", dividendToken)\n    {\n        claimWait = 3600;\n        minimumTokenBalanceForDividends = 1000  * (10**18); \n\n        deployer = _msgSender();\n        parentToken = _parentToken;\n        transferOwnership(_parentToken);\n    }\n\n    //== BEP20 owner function ==\n    function getOwner() public view override returns (address) {\n        return owner();\n    }\n\n    function updateDeployerAddress(address newDeployer) external onlyOwnerOrDeployer{\n        require(deployer != newDeployer, \"The address is already set\");\n        deployer = newDeployer;\n        emit LogUpdateDeployerAddress(newDeployer);\n    }\n\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\n        public\n        override(ERC20TokenRecover, IERC20TokenRecover)\n        onlyOwner\n    {\n        require(tokenAddress != dividendToken, \"Fight4HopeDividendTracker: Cannot retrieve RBA\");\n        super.recoverERC20(tokenAddress, tokenAmount);\n    }\n\n    function _transfer(\n        address,\n        address,\n        uint256\n    ) internal pure override {\n        require(false, \"Fight4HopeDividendTracker: No transfers allowed\");\n    }\n\n    function withdrawDividend() public override(DividendPayingToken, IDividendPayingTokenInterface) {\n        _withdrawDividendOfUser(payable(msg.sender));\n    }\n\n    function excludeFromDividends(address account) external override onlyOwnerOrDeployer {\n        require(!excludedFromDividends[account], \"Fight4HopeDividendTracker: Account already excluded\");\n        excludedFromDividends[account] = true;\n\n        _setBalance(account, 0);\n        tokenHoldersMap.remove(account);\n\n        emit ExcludeFromDividends(account);\n    }\n\n    function includeInDividends(address account) external override onlyOwnerOrDeployer {\n        require(excludedFromDividends[account], \"Fight4HopeDividendTracker: Account not excluded\");\n\n        excludedFromDividends[account] = false;\n        _setBalance(account, 0);\n\n        emit IncludedInDividends(account);\n    }\n\n    function updateClaimWait(uint256 newClaimWait) external override onlyOwnerOrDeployer {\n        require(\n            newClaimWait >= 3600 && newClaimWait <= 86400,\n            \"Fight4HopeDividendTracker: claimWait must be updated to between 1 and 24 hours\"\n        );\n        require(newClaimWait != claimWait, \"Fight4HopeDividendTracker: Cannot update claimWait to same value\");\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\n        claimWait = newClaimWait;\n    }\n\n    function updateMinTokenBalance(uint256 minTokens) external override onlyOwnerOrDeployer {\n        minimumTokenBalanceForDividends = minTokens * (10**18);\n        emit LogUpdateMinTokenBalance(minimumTokenBalanceForDividends);\n    }\n\n    function getLastProcessedIndex() external view override returns (uint256) {\n        return lastProcessedIndex;\n    }\n\n    function getNumberOfTokenHolders() external view override returns (uint256) {\n        return tokenHoldersMap.keys.length;\n    }\n\n    function getAccount(address _account)\n        public\n        view\n        override\n        returns (\n            address account,\n            int256 index,\n            int256 iterationsUntilProcessed,\n            uint256 withdrawableDividends,\n            uint256 totalDividends,\n            uint256 lastClaimTime,\n            uint256 nextClaimTime,\n            uint256 secondsUntilAutoClaimAvailable\n        )\n    {\n        account = _account;\n\n        index = tokenHoldersMap.getIndexOfKey(account);\n\n        iterationsUntilProcessed = -1;\n\n        if (index >= 0) {\n            if (uint256(index) > lastProcessedIndex) {\n                iterationsUntilProcessed = index - int256(lastProcessedIndex);\n            } else {\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex\n                    ? tokenHoldersMap.keys.length - lastProcessedIndex\n                    : 0;\n                iterationsUntilProcessed = index + int256(processesUntilEndOfArray);\n            }\n        }\n\n        withdrawableDividends = withdrawableDividendOf(account);\n        totalDividends = accumulativeDividendOf(account);\n\n        lastClaimTime = lastClaimTimes[account];\n\n        nextClaimTime = lastClaimTime > 0 ? lastClaimTime + claimWait : 0;\n\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ? nextClaimTime - block.timestamp : 0;\n    }\n\n    function getAccountAtIndex(uint256 index)\n        external\n        view\n        override\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        if (index >= tokenHoldersMap.size()) return (address(0), -1, -1, 0, 0, 0, 0, 0);\n        address account = tokenHoldersMap.getKeyAtIndex(index);\n        return getAccount(account);\n    }\n\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\n        if (lastClaimTime > block.timestamp) {\n            return false;\n        }\n\n        return (block.timestamp - lastClaimTime) >= claimWait;\n    }\n\n    function ensureBalance(bool _process) external override {\n        ensureBalanceForUser(payable(_msgSender()), _process);\n    }\n\n    function ensureBalanceForUsers(address payable[] memory accounts, bool _process)\n        external\n        override\n        onlyOwnerOrDeployer\n    {\n        for (uint256 idx = 0; idx < accounts.length; idx++) {\n            ensureBalanceForUser(accounts[idx], _process);\n        }\n    }\n\n    function ensureBalanceForUser(address payable account, bool _process) public override onlyOwnerOrDeployer {\n        uint256 balance = IERC20(parentToken).balanceOf(account);\n\n        if (excludedFromDividends[account]) return;\n\n        if (balance != balanceOf(account)) {\n            if (balance >= minimumTokenBalanceForDividends) {\n                _setBalance(account, balance);\n                tokenHoldersMap.set(account, balance);\n            } else {\n                _setBalance(account, 0);\n                tokenHoldersMap.remove(account);\n            }\n        }\n\n        if (_process) processAccount(account, false);\n    }\n\n    function setBalance(address payable account, uint256 newBalance) external override onlyOwner {\n        if (excludedFromDividends[account]) return;\n\n        if (newBalance >= minimumTokenBalanceForDividends) {\n            _setBalance(account, newBalance);\n            tokenHoldersMap.set(account, newBalance);\n        } else {\n            _setBalance(account, 0);\n            tokenHoldersMap.remove(account);\n        }\n\n        processAccount(account, true);\n    }\n\n    function process(uint256 gas)\n        external\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\n\n        if (numberOfTokenHolders == 0) {\n            return (0, 0, lastProcessedIndex);\n        }\n\n        uint256 _lastProcessedIndex = lastProcessedIndex;\n\n        uint256 gasUsed = 0;\n\n        uint256 gasLeft = gasleft();\n\n        uint256 iterations = 0;\n        uint256 claims = 0;\n\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\n            _lastProcessedIndex++;\n\n            if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\n                _lastProcessedIndex = 0;\n            }\n\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\n\n            if (canAutoClaim(lastClaimTimes[account])) {\n                if (processAccount(payable(account), true)) {\n                    claims++;\n                }\n            }\n\n            iterations++;\n\n            uint256 newGasLeft = gasleft();\n            if (gasLeft > newGasLeft) gasUsed = gasUsed + (gasLeft - newGasLeft);\n            gasLeft = newGasLeft;\n        }\n\n        lastProcessedIndex = _lastProcessedIndex;\n\n        return (iterations, claims, lastProcessedIndex);\n    }\n\n    function processAccount(address payable account, bool automatic)\n        public\n        override\n        onlyOwnerOrDeployer\n        returns (bool)\n    {\n        uint256 amount = _withdrawDividendOfUser(account);\n\n        if (amount > 0) {\n            lastClaimTimes[account] = block.timestamp;\n            emit Claim(account, amount, automatic);\n            return true;\n        }\n\n        return false;\n    }\n}\n"
    },
    "contracts/mock/fight/libraries/IterableMapping.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary IterableMapping {\n    // Iterable mapping from address to uint;\n    struct Map {\n        address[] keys;\n        mapping(address => uint256) values;\n        mapping(address => uint256) indexOf;\n        mapping(address => bool) inserted;\n    }\n\n    function get(Map storage map, address key) internal view returns (uint256) {\n        return map.values[key];\n    }\n\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\n        if (!map.inserted[key]) {\n            return -1;\n        }\n        return int256(map.indexOf[key]);\n    }\n\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\n        return map.keys[index];\n    }\n\n    function size(Map storage map) internal view returns (uint256) {\n        return map.keys.length;\n    }\n\n    function set(\n        Map storage map,\n        address key,\n        uint256 val\n    ) internal {\n        if (map.inserted[key]) {\n            map.values[key] = val;\n        } else {\n            map.inserted[key] = true;\n            map.values[key] = val;\n            map.indexOf[key] = map.keys.length;\n            map.keys.push(key);\n        }\n    }\n\n    function remove(Map storage map, address key) internal {\n        if (!map.inserted[key]) {\n            return;\n        }\n\n        delete map.inserted[key];\n        delete map.values[key];\n\n        uint256 index = map.indexOf[key];\n        uint256 lastIndex = map.keys.length - 1;\n        address lastKey = map.keys[lastIndex];\n\n        map.indexOf[lastKey] = index;\n        delete map.indexOf[key];\n\n        map.keys[index] = lastKey;\n        map.keys.pop();\n    }\n}\n"
    },
    "contracts/mock/fight/token/DividendPayingToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./ERC20.sol\";\nimport \"./interfaces/IDividendPayingTokenInterface.sol\";\nimport \"./interfaces/IDividendPayingTokenOptionalInterface.sol\";\n\nabstract contract DividendPayingToken is\n    Ownable,\n    ERC20,\n    IDividendPayingTokenInterface,\n    IDividendPayingTokenOptionalInterface\n{\n    address public override dividendToken;\n\n    uint256 internal constant magnitude = 2**128;\n\n    uint256 internal magnifiedDividendPerShare;\n\n    mapping(address => int256) internal magnifiedDividendCorrections;\n    mapping(address => uint256) internal withdrawnDividends;\n\n    uint256 public override totalDividendsDistributed;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _dividendToken\n    ) ERC20(_name, _symbol) {\n        dividendToken = _dividendToken;\n    }\n\n    function distributeDividends(uint256 amount) public virtual override onlyOwner {\n        require(totalSupply() > 0, \"DividendPayingToken: Total Supply must be > 0\");\n\n        if (amount > 0) {\n            \n            magnifiedDividendPerShare = magnifiedDividendPerShare + ((amount * magnitude) / totalSupply());\n            emit DividendsDistributed(msg.sender, amount);\n\n            totalDividendsDistributed = totalDividendsDistributed + amount;\n        }\n    }\n\n    function withdrawDividend() public virtual override {\n        _withdrawDividendOfUser(payable(msg.sender));\n    }\n\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\n        if (_withdrawableDividend > 0) {\n            withdrawnDividends[user] = withdrawnDividends[user] + _withdrawableDividend;\n            emit DividendWithdrawn(user, _withdrawableDividend);\n            bool success = IERC20(dividendToken).transfer(user, _withdrawableDividend);\n\n            if (!success) {\n                withdrawnDividends[user] = withdrawnDividends[user] - _withdrawableDividend;\n                return 0;\n            }\n\n            return _withdrawableDividend;\n        }\n\n        return 0;\n    }\n\n    function dividendOf(address _owner) public view override returns (uint256) {\n        return withdrawableDividendOf(_owner);\n    }\n\n    function withdrawableDividendOf(address _owner) public view override returns (uint256) {\n        return accumulativeDividendOf(_owner) - withdrawnDividends[_owner];\n    }\n\n    function withdrawnDividendOf(address _owner) public view override returns (uint256) {\n        return withdrawnDividends[_owner];\n    }\n\n    function accumulativeDividendOf(address _owner) public view override returns (uint256) {\n        return\n            uint256(int256((magnifiedDividendPerShare * balanceOf(_owner))) + magnifiedDividendCorrections[_owner]) /\n            magnitude;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal virtual override {\n        require(false);\n\n        int256 _magCorrection = int256(magnifiedDividendPerShare * value);\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from] + _magCorrection;\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to] - _magCorrection;\n    }\n\n    function _mint(address account, uint256 value) internal override {\n        super._mint(account, value);\n\n        magnifiedDividendCorrections[account] =\n            magnifiedDividendCorrections[account] -\n            int256(magnifiedDividendPerShare * value);\n    }\n\n    function _burn(address account, uint256 value) internal override {\n        super._burn(account, value);\n\n        magnifiedDividendCorrections[account] =\n            magnifiedDividendCorrections[account] +\n            int256(magnifiedDividendPerShare * value);\n    }\n\n    function _setBalance(address account, uint256 newBalance) internal {\n        uint256 currentBalance = balanceOf(account);\n\n        if (newBalance > currentBalance) {\n            uint256 mintAmount = newBalance - currentBalance;\n            _mint(account, mintAmount);\n        } else if (newBalance < currentBalance) {\n            uint256 burnAmount = currentBalance - newBalance;\n            _burn(account, burnAmount);\n        }\n    }\n}\n"
    },
    "contracts/mock/fight/token/extensions/ERC20TokenRecover.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '../interfaces/IERC20TokenRecover.sol';\n\n/**\n * @title ERC20TokenRecover\n * @dev Allows owner to recover any ERC20 or ETH sent into the contract\n * based on https://github.com/vittominacori/eth-token-recover by Vittorio Minacori\n */\ncontract ERC20TokenRecover is Ownable, IERC20TokenRecover {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice function that transfers an token amount from this contract to the owner when accidentally sent\n     * @param tokenAddress The token contract address\n     * @param tokenAmount Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public virtual override onlyOwner {\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n    }\n\n    /**\n     * @notice function that transfers an eth amount from this contract to the owner when accidentally sent\n     * @param amount Number of eth to be sent\n     */\n    function recoverETH(uint256 amount) public virtual override onlyOwner {\n        (bool sent, ) = owner().call{value: amount}('');\n        require(sent, 'ERC20TokenRecover: SENDING_ETHER_FAILED');\n    }\n}\n"
    },
    "contracts/mock/fight/token/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string internal _name;\n    string internal _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/mock/fight/IFight4Hope.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./interfaces/IDEXRouter.sol\";\nimport \"./token/interfaces/IBEP20.sol\";\nimport \"./token/ERC1363/IERC1363.sol\";\nimport \"./token/ERC2612/IERC2612.sol\";\nimport \"./token/interfaces/IERC20Burnable.sol\";\nimport \"./token/interfaces/IERC20TokenRecover.sol\";\nimport \"./IFight4HopeDividendTracker.sol\";\n\ninterface IFight4Hope is IBEP20, IERC1363, IERC2612, IERC20Burnable, IERC20TokenRecover {\n    function dexRouters(address router) external view returns (bool);\n\n    // store addresses that are automatic market maker (dex) pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    function automatedMarketMakerPairs(address pair) external view returns (bool);\n\n    function defaultDexRouter() external view returns (IDEXRouter);\n\n    function defaultPair() external view returns (address);\n\n    function dividendToken() external view returns (address);\n\n    function marketingWallet() external view returns (address);\n\n    function liquidityWallet() external view returns (address);\n\n    function dividendTracker() external view returns (IFight4HopeDividendTracker);\n\n    function transfersEnabled() external view returns (bool);\n\n    // Supply and amounts\n    function swapTokensAtAmount() external view returns (uint256);\n\n    function maxWalletToken() external view returns (uint256);\n\n    // fees (from a total of 10000)\n    function buyFeesCollected() external view returns (uint256);\n\n    function buyDividendFee() external view returns (uint256);\n\n    function buyLiquidityFee() external view returns (uint256);\n\n    function buyMarketingFee() external view returns (uint256);\n\n    function buyTotalFees() external view returns (uint256);\n\n    function sellFeesCollected() external view returns (uint256);\n\n    function sellDividendFee() external view returns (uint256);\n\n    function sellLiquidityFee() external view returns (uint256);\n\n    function sellMarketingFee() external view returns (uint256);\n\n    function sellTotalFees() external view returns (uint256);\n\n    function gasForProcessing() external view returns (uint256);\n\n    // white listed adresses (excluded from fees and dividends)\n    // these addresses can also make transfers before presale is over\n    function whitelistedAddresses(address account) external view returns (bool);\n\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\n\n    event UpdateDefaultDexRouter(address indexed newAddress, address indexed oldAddress);\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\n\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n\n    event FixedSaleBuy(\n        address indexed account,\n        uint256 indexed amount,\n        bool indexed earlyParticipant,\n        uint256 numberOfBuyers\n    );\n\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\n\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\n\n    event ProcessedDividendTracker(\n        uint256 iterations,\n        uint256 claims,\n        uint256 lastProcessedIndex,\n        bool indexed automatic,\n        uint256 gas,\n        address indexed processor\n    );\n\n    function initializeDividendTracker(IFight4HopeDividendTracker _dividendTracker) external;\n\n    function setWhitelistAddress(address _whitelistAddress, bool whitelisted) external;\n\n    function updateDividendTracker(address newAddress) external;\n\n    function addNewRouter(address _router, bool makeDefault) external;\n\n    function excludeFromFees(address account, bool excluded) external;\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external;\n\n    function setAutomatedMarketMakerPair(address pair, bool value) external;\n\n    function updateMinTokenBalance(uint256 minTokens) external;\n\n    function updateMarketingWallet(address newVault1) external;\n\n    function updateLiquidityWallet(address newLiquidityWallet) external;\n\n    function updateGasForProcessing(uint256 newValue) external;\n\n    function updateClaimWait(uint256 claimWait) external;\n\n    function getClaimWait() external view returns (uint256);\n\n    function getTotalDividendsDistributed() external view returns (uint256);\n\n    function isExcludedFromFees(address account) external view returns (bool);\n\n    function withdrawableDividendOf(address account) external view returns (uint256);\n\n    function dividendTokenBalanceOf(address account) external view returns (uint256);\n\n    function getAccountDividendsInfo(address account)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function getAccountDividendsInfoAtIndex(uint256 index)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function processDividendTracker(uint256 gas) external;\n\n    function claim() external;\n\n    function getLastProcessedIndex() external view returns (uint256);\n\n    function getNumberOfDividendTokenHolders() external view returns (uint256);\n\n    /**\n     * Enable or disable transfers, used before presale and on critical problems in or with the token contract\n     */\n    function setTransfersEnabled(bool enabled) external;\n\n    function updateBuyFees(\n        uint256 _dividendFee,\n        uint256 _liquidityFee,\n        uint256 _marketingFee\n    ) external;\n\n    function updateSellFees(\n        uint256 _dividendFee,\n        uint256 _liquidityFee,\n        uint256 _marketingFee\n    ) external;\n\n    function updateSwapTokensAtAmount(uint256 _swapTokensAtAmount) external;\n}"
    },
    "contracts/mock/fight/interfaces/IDEXRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\n/**\n * Supports the Uniswap V1 + V2 structure\n */\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/mock/fight/token/ERC1363/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363 Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for a Payable Token contract as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363 {\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferAndCall(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\n     * @return true unless throwing\n     */\n    function transferAndCall(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param sender address The address which you want to send tokens from\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param sender address The address which you want to send tokens from\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     */\n    function approveAndCall(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\n     */\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n"
    },
    "contracts/mock/fight/token/ERC2612/IERC2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC2612 standard as defined in the EIP.\n *\n * Adds the {permit} method, which can be used to change one's\n * {IERC20-allowance} without having to send a transaction, by signing a\n * message. This allows users to spend tokens without having to hold Ether.\n *\n * See https://eips.ethereum.org/EIPS/eip-2612.\n */\ninterface IERC2612 {\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /**\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Sets `value` as allowance of `spender` account over `owner` account's token,\n     * given `owner` account's signed approval.\n     * Emits {Approval} event.\n     * Requirements:\n     *   - `deadline` must be timestamp in future.\n     *   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over\n     *      EIP712-formatted function arguments.\n     *   - the signature must use `owner` account's current nonce (see {nonces}).\n     *   - the signer cannot be zero address and must be `owner` account.\n     * For more information on signature format, see\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Same as permit, but also performs a transfer\n     */\n    function transferWithPermit(\n        address owner,\n        address to,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (bool);\n}\n"
    },
    "contracts/mock/fight/token/interfaces/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Based on @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\n */\ninterface IERC20Burnable {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) external;\n}\n"
    },
    "contracts/mock/fight/token/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../ERC20.sol\";\nimport \"../interfaces/IERC20Burnable.sol\";\n\n/**\n * @dev Based on @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\n */\nabstract contract ERC20Burnable is Context, ERC20, IERC20Burnable {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual override {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual override {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        _approve(account, _msgSender(), currentAllowance - amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/mock/fight/token/ERC2612/ERC2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '../ERC20.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\nimport './IERC2612.sol';\n\n/**\n * Implementation adapted from\n * https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol.\n */\nabstract contract ERC2612 is ERC165, ERC20, IERC2612 {\n    mapping(address => uint256) public override nonces;\n\n    bytes32 public immutable PERMIT_TYPEHASH =\n        keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\n    bytes32 public immutable TRANSFER_TYPEHASH =\n        keccak256('Transfer(address owner,address to,uint256 value,uint256 nonce,uint256 deadline)');\n    bytes32 public override DOMAIN_SEPARATOR;\n\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name_)),\n                keccak256(bytes(version())),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\n        return interfaceId == type(IERC2612).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Setting the version as a function so that it can be overriden\n     */\n    function version() public pure virtual returns (string memory) {\n        return '1';\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override {\n        verifyPermit(PERMIT_TYPEHASH, owner, spender, value, deadline, v, r, s);\n        _approve(owner, spender, value);\n    }\n\n    function transferWithPermit(\n        address owner,\n        address to,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (bool) {\n        verifyPermit(TRANSFER_TYPEHASH, owner, to, value, deadline, v, r, s);\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    function verifyPermit(\n        bytes32 typehash,\n        address owner,\n        address to,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        require(block.timestamp <= deadline, 'ERC20Permit: Expired permit');\n\n        bytes32 hashStruct = keccak256(abi.encode(typehash, owner, to, value, nonces[owner]++, deadline));\n\n        require(\n            verifyEIP712(owner, hashStruct, v, r, s) || verifyPersonalSign(owner, hashStruct, v, r, s),\n            'ERC20Permit: invalid signature'\n        );\n    }\n\n    function verifyEIP712(\n        address owner,\n        bytes32 hashStruct,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (bool) {\n        bytes32 hash = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, hashStruct));\n        address signer = ecrecover(hash, v, r, s);\n        return (signer != address(0) && signer == owner);\n    }\n\n    function verifyPersonalSign(\n        address owner,\n        bytes32 hashStruct,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (bool) {\n        bytes32 hash = prefixed(hashStruct);\n        address signer = ecrecover(hash, v, r, s);\n        return (signer != address(0) && signer == owner);\n    }\n\n    /**\n     * @dev Builds a prefixed hash to mimic the behavior of eth_sign.\n     */\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked('\\x19Ethereum Signed Message:\\n32', hash));\n    }\n}\n"
    },
    "contracts/mock/fight/Fight4Hope.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./token/ERC20.sol\";\nimport \"./token/ERC1363/ERC1363.sol\";\nimport \"./token/ERC2612/ERC2612.sol\";\nimport \"./token/extensions/ERC20Burnable.sol\";\nimport \"./token/extensions/ERC20TokenRecover.sol\";\nimport \"./interfaces/IDEXRouter.sol\";\nimport \"./interfaces/IDEXFactory.sol\";\nimport \"./interfaces/IDEXPair.sol\";\nimport \"./IFight4Hope.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./IFight4HopeDividendTracker.sol\";\n\ncontract Fight4Hope is ERC20, ERC1363, ERC2612, ERC20Burnable, ERC20TokenRecover, IFight4Hope {\n  mapping(address => bool) public override dexRouters;\n  // store addresses that are automatic market maker (dex) pairs. Any transfer *to* these addresses\n  // could be subject to a maximum transfer amount\n  mapping(address => bool) public override automatedMarketMakerPairs;\n\n  IDEXRouter public override defaultDexRouter;\n  address public override defaultPair;\n\n  address public override dividendToken;\n  // to accommodate lock or unlock balance by bridge\n  address public bridgeVault;\n  address public bridge;\n  address public override marketingWallet;\n  address public override liquidityWallet;\n  IFight4HopeDividendTracker public override dividendTracker;\n  IFight4HopeDividendTracker public oldDividendTracker;\n\n  bool public override transfersEnabled = false;\n  bool private isSwappingFees;\n  bool public dexTradesEnabled = false;\n\n  // Supply and amounts\n  // 100 million (this will also be the total supply as there is not public mint function)\n  uint256 private _startSupply = 100000000 * (10**18);\n  uint256 public override swapTokensAtAmount = 1000 * (10**18);\n  uint256 public override maxWalletToken = 2000000 * (10**18); // 2% of total supply\n\n  // fees (from a total of 10000)\n  uint256 public override buyFeesCollected = 0;\n  uint256 public override buyDividendFee = 100;\n  uint256 public override buyLiquidityFee = 100;\n  uint256 public override buyMarketingFee = 700;\n  uint256 public override buyTotalFees = buyDividendFee + buyLiquidityFee + buyMarketingFee;\n\n  uint256 public override sellFeesCollected = 0;\n  uint256 public override sellDividendFee = 100;\n  uint256 public override sellLiquidityFee = 100;\n  uint256 public override sellMarketingFee = 700;\n  uint256 public override sellTotalFees = sellDividendFee + sellLiquidityFee + sellMarketingFee;\n\n  // use by default 300,000 gas to process auto-claiming dividends\n  uint256 public override gasForProcessing = 300000;\n\n  // white listed adresses (excluded from fees and dividends)\n  // these addresses can also make transfers before presale is over\n  mapping(address => bool) public override whitelistedAddresses;\n\n  // exlcude from fees and max transaction amount\n  mapping(address => bool) private _isExcludedFromFees;\n\n  bool private nameChanged = false;\n\n  event LogSetBridge(address indexed setter, address bridge);\n  event LogLockByBridge(address indexed account, uint256 tAmount);\n  event LogUnlockByBridge(address indexed account, uint256 tAmount);\n  event LogUpdateDividendToken(address newToken);\n  event LogMarketingWalletUpdated(address _marketingWallet);\n  event LogUpdateNameAndSymbol(string name, string symbol);\n  event LogAddNewRouter(address newRouter);\n  event LogSetTransfersEnabled(bool _enabled);\n  event LogSetDexTradesEnabled(bool _enabled);\n  event LogUpdateBuyFees(uint256 div, uint256 liquidity, uint256 marketing);\n  event LogUpdateSellFees(uint256 div, uint256 liquidity, uint256 marketing);\n  event LogUpdateSwapTokensAtAmount(uint256 _swapTokensAtAmount);\n\n  constructor(\n    address _routerAddress,\n    address _dividendToken,\n    address _marketingWallet,\n    address _bridgeVault\n  ) ERC2612(\"Fight4Hope\", \"F4H\") {\n    IDEXRouter _dexRouter = IDEXRouter(_routerAddress);\n    dividendToken = _dividendToken;\n    marketingWallet = _marketingWallet;\n    liquidityWallet = owner();\n    bridgeVault = _bridgeVault;\n\n    defaultDexRouter = _dexRouter;\n    dexRouters[_routerAddress] = true;\n    defaultPair = IDEXFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\n\n    _setAutomatedMarketMakerPair(defaultPair, true);\n\n    //_mint is an internal function in ERC20.sol that is only called here, and CANNOT be called ever again\n    _mint(owner(), _startSupply);\n  }\n\n  function initializeDividendTracker(IFight4HopeDividendTracker _dividendTracker) public override onlyOwner {\n    require(address(dividendTracker) == address(0), \"Fight4Hope: Dividend tracker already initialized\");\n    dividendTracker = _dividendTracker;\n\n    // exclude from receiving dividends\n    dividendTracker.excludeFromDividends(address(defaultPair));\n    dividendTracker.excludeFromDividends(address(dividendTracker));\n    dividendTracker.excludeFromDividends(address(defaultDexRouter));\n    dividendTracker.excludeFromDividends(address(bridgeVault));\n\n    setWhitelistAddress(address(this), true);\n    setWhitelistAddress(owner(), true);\n    setWhitelistAddress(marketingWallet, true);\n  }\n\n  receive() external payable {}\n\n  //== BEP20 owner function ==\n  function getOwner() public view override returns (address) {\n    return owner();\n  }\n\n  function updateDividendToken(address newToken, address newDividendTracker) external onlyOwner {\n    require(dividendToken != newToken, \"Alreday set to this address\");\n    require(newToken != address(0), \"InvalidAddress\");\n    require(newDividendTracker != address(0), \"InvalidAddress\");\n    oldDividendTracker = dividendTracker;\n    dividendToken = newToken;\n    updateDividendTracker(newDividendTracker);\n    emit LogUpdateDividendToken(newToken);\n  }\n\n  function updateNameAndSymbol(string memory name_, string memory symbol_) external onlyOwner {\n    require(!nameChanged, \"Fight4Hope: Name already changed\");\n    _name = name_;\n    _symbol = symbol_;\n    nameChanged = true;\n    emit LogUpdateNameAndSymbol(_name, _symbol);\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1363, ERC2612) returns (bool) {\n    return super.supportsInterface(interfaceId);\n  }\n\n  function recoverERC20(address tokenAddress, uint256 tokenAmount)\n    public\n    override(ERC20TokenRecover, IERC20TokenRecover)\n    onlyOwner\n  {\n    require(tokenAddress != address(this), \"Cannot retrieve Fight4Hopes\");\n    super.recoverERC20(tokenAddress, tokenAmount);\n  }\n\n  function setWhitelistAddress(address _whitelistAddress, bool whitelisted) public override onlyOwner {\n    whitelistedAddresses[_whitelistAddress] = whitelisted;\n    excludeFromFees(_whitelistAddress, whitelisted);\n    if (whitelisted) {\n      dividendTracker.excludeFromDividends(_whitelistAddress);\n    } else {\n      dividendTracker.includeInDividends(_whitelistAddress);\n    }\n  }\n\n  function updateDividendTracker(address newAddress) public override onlyOwner {\n    require(newAddress != address(0), \"Fight4Hope: Dividend tracker not yet initialized\");\n    require(newAddress != address(dividendTracker), \"Fight4Hope: The dividend tracker already has that address\");\n\n    IFight4HopeDividendTracker newDividendTracker = IFight4HopeDividendTracker(payable(newAddress));\n    require(\n      newDividendTracker.getOwner() == address(this),\n      \"Fight4Hope: The new dividend tracker must be owned by the Fight4Hope token contract\"\n    );\n\n    dividendTracker = newDividendTracker;\n    // exclude from receiving dividends\n    dividendTracker.excludeFromDividends(address(defaultPair));\n    dividendTracker.excludeFromDividends(address(dividendTracker));\n    dividendTracker.excludeFromDividends(address(defaultDexRouter));\n    dividendTracker.excludeFromDividends(address(bridgeVault));\n\n    emit UpdateDividendTracker(newAddress, address(dividendTracker));\n  }\n\n  function addNewRouter(address _router, bool makeDefault) external override onlyOwner {\n    dexRouters[_router] = true;\n    dividendTracker.excludeFromDividends(_router);\n\n    if (makeDefault) {\n      emit UpdateDefaultDexRouter(_router, address(defaultDexRouter));\n      defaultDexRouter = IDEXRouter(_router);\n      defaultPair = IDEXFactory(defaultDexRouter.factory()).createPair(address(this), defaultDexRouter.WETH());\n      _setAutomatedMarketMakerPair(defaultPair, true);\n    }\n    emit LogAddNewRouter(_router);\n  }\n\n  function excludeFromFees(address account, bool excluded) public override onlyOwner {\n    require(_isExcludedFromFees[account] != excluded, \"Fight4Hope: Account is already the value of 'excluded'\");\n    _isExcludedFromFees[account] = excluded;\n    emit ExcludeFromFees(account, excluded);\n  }\n\n  function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external override onlyOwner {\n    for (uint256 i = 0; i < accounts.length; i++) {\n      excludeFromFees(accounts[i], excluded);\n    }\n  }\n\n  function setAutomatedMarketMakerPair(address pair, bool value) external override onlyOwner {\n    require(\n      value || pair != defaultPair,\n      \"Fight4Hope: The default pair cannot be removed from automatedMarketMakerPairs\"\n    );\n    _setAutomatedMarketMakerPair(pair, value);\n  }\n\n  function _setAutomatedMarketMakerPair(address pair, bool value) private {\n    require(\n      automatedMarketMakerPairs[pair] != value,\n      \"Fight4Hope: Automated market maker pair is already set to that value\"\n    );\n\n    automatedMarketMakerPairs[pair] = value;\n    if (value && address(dividendTracker) != address(0)) dividendTracker.excludeFromDividends(pair);\n    emit SetAutomatedMarketMakerPair(pair, value);\n  }\n\n  function updateMinTokenBalance(uint256 minTokens) external override onlyOwner {\n    dividendTracker.updateMinTokenBalance(minTokens);\n  }\n\n  function updateMarketingWallet(address newMarketingWallet) external override onlyOwner {\n    require(newMarketingWallet != marketingWallet, \"Fight4Hope: The Marketing wallet is already this address\");\n    setWhitelistAddress(newMarketingWallet, true);\n    marketingWallet = newMarketingWallet;\n    emit LogMarketingWalletUpdated(newMarketingWallet);\n  }\n\n  function updateLiquidityWallet(address newLiquidityWallet) external override onlyOwner {\n    require(newLiquidityWallet != liquidityWallet, \"Fight4Hope: The liquidity wallet is already this address\");\n    setWhitelistAddress(newLiquidityWallet, true);\n    emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\n    liquidityWallet = newLiquidityWallet;\n  }\n\n  function updateGasForProcessing(uint256 newValue) external override onlyOwner {\n    require(\n      newValue >= 200000 && newValue <= 500000,\n      \"Fight4Hope: gasForProcessing must be between 200,000 and 500,000\"\n    );\n    require(newValue != gasForProcessing, \"Fight4Hope: Cannot update gasForProcessing to same value\");\n    emit GasForProcessingUpdated(newValue, gasForProcessing);\n    gasForProcessing = newValue;\n  }\n\n  function updateClaimWait(uint256 claimWait) external override onlyOwner {\n    dividendTracker.updateClaimWait(claimWait);\n  }\n\n  function getClaimWait() external view override returns (uint256) {\n    return dividendTracker.claimWait();\n  }\n\n  function getTotalDividendsDistributed() external view override returns (uint256) {\n    return dividendTracker.totalDividendsDistributed();\n  }\n\n  function isExcludedFromFees(address account) external view override returns (bool) {\n    return _isExcludedFromFees[account];\n  }\n\n  function withdrawableDividendOf(address account) external view override returns (uint256) {\n    return dividendTracker.withdrawableDividendOf(account);\n  }\n\n  function dividendTokenBalanceOf(address account) external view override returns (uint256) {\n    return dividendTracker.balanceOf(account);\n  }\n\n  function getAccountDividendsInfo(address account)\n    external\n    view\n    override\n    returns (\n      address,\n      int256,\n      int256,\n      uint256,\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    return dividendTracker.getAccount(account);\n  }\n\n  function getAccountDividendsInfoAtIndex(uint256 index)\n    external\n    view\n    override\n    returns (\n      address,\n      int256,\n      int256,\n      uint256,\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    return dividendTracker.getAccountAtIndex(index);\n  }\n\n  function processDividendTracker(uint256 gas) external override {\n    (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\n    emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\n  }\n\n  function claim() external override {\n    dividendTracker.processAccount(payable(msg.sender), false);\n  }\n\n  function getLastProcessedIndex() external view override returns (uint256) {\n    return dividendTracker.getLastProcessedIndex();\n  }\n\n  function getNumberOfDividendTokenHolders() external view override returns (uint256) {\n    return dividendTracker.getNumberOfTokenHolders();\n  }\n\n  /**\n   * Enable or disable transfers, used before presale and on critical problems in or with the token contract\n   */\n  function setTransfersEnabled(bool enabled) external override onlyOwner {\n    require(transfersEnabled != enabled, \"Already set to this value\");\n    transfersEnabled = enabled;\n    emit LogSetTransfersEnabled(enabled);\n  }\n\n  function setDexTradesEnabled(bool enabled) external onlyOwner {\n    require(dexTradesEnabled != enabled, \"Already set to this value\");\n    dexTradesEnabled = enabled;\n    emit LogSetDexTradesEnabled(enabled);\n  }\n\n  function updateBuyFees(\n    uint256 _dividendFee,\n    uint256 _liquidityFee,\n    uint256 _marketingFee\n  ) external override onlyOwner {\n    buyDividendFee = _dividendFee;\n    buyLiquidityFee = _liquidityFee;\n    buyMarketingFee = _marketingFee;\n    buyTotalFees = buyDividendFee + buyLiquidityFee + buyMarketingFee;\n    require(buyTotalFees <= 5000, \"Max fee  is 50%\");\n    emit LogUpdateBuyFees(buyDividendFee, buyLiquidityFee, buyMarketingFee);\n  }\n\n  function updateSellFees(\n    uint256 _dividendFee,\n    uint256 _liquidityFee,\n    uint256 _marketingFee\n  ) external override onlyOwner {\n    sellDividendFee = _dividendFee;\n    sellLiquidityFee = _liquidityFee;\n    sellMarketingFee = _marketingFee;\n    sellTotalFees = sellDividendFee + sellLiquidityFee + sellMarketingFee;\n    require(sellTotalFees <= 5000, \"Max fee is 50%\");\n    emit LogUpdateSellFees(sellDividendFee, sellLiquidityFee, sellMarketingFee);\n  }\n\n  function updateSwapTokensAtAmount(uint256 _swapTokensAtAmount) external override onlyOwner {\n    require(_swapTokensAtAmount > 0, \"Fight4Hope: Amount should be higher then 0\");\n    require(_swapTokensAtAmount <= 10 * (10**6) * (10**18), \"Fight4Hope: Max should be at 10%\");\n    swapTokensAtAmount = _swapTokensAtAmount;\n    emit LogUpdateSwapTokensAtAmount(swapTokensAtAmount);\n  }\n\n  function _transfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal override {\n    require(from != address(0), \"ERC20: transfer from the zero address\");\n    require(to != address(0), \"ERC20: transfer to the zero address\");\n\n    // when NOT from or to owner, to dex pair\n    // check if target wallet exeeds the maxWalletPAirs\n    if (\n      from != owner() &&\n      to != owner() &&\n      to != address(0) &&\n      to != 0x000000000000000000000000000000000000dEaD &&\n      !automatedMarketMakerPairs[to]\n    ) {\n      uint256 contractBalanceRecepient = balanceOf(to);\n      require(contractBalanceRecepient + amount <= maxWalletToken, \"Fight4Hope: Exceeds maximum wallet token amount.\");\n    }\n\n    if (!dexTradesEnabled && (automatedMarketMakerPairs[to] || automatedMarketMakerPairs[from])) {\n      require(whitelistedAddresses[from], \"Fight4Hope: dex trades are disabled\");\n    }\n\n    // only whitelisted addresses can make transfers when transfers are disabled\n    if (!transfersEnabled) {\n      require(whitelistedAddresses[from], \"Fight4Hope: Transfering is disabled\");\n    }\n\n    if (amount == 0) {\n      super._transfer(from, to, 0);\n      return;\n    }\n\n    uint256 senderBalance = balanceOf(from);\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n\n    // take fee\n    amount = collectFees(from, to, amount);\n\n    if (address(dividendTracker) != address(0)) {\n      try dividendTracker.setBalance(payable(from), balanceOf(from) - amount) {} catch {}\n      try dividendTracker.setBalance(payable(to), balanceOf(to) + amount) {} catch {}\n    }\n\n    // swap fees before transfer has happened and after dividend balances are done\n    swapFeesIfAmountIsReached(from, to);\n\n    super._transfer(from, to, amount);\n\n    if (address(dividendTracker) != address(0) && !isSwappingFees) {\n      uint256 gas = gasForProcessing;\n\n      try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\n        emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\n      } catch {}\n    }\n  }\n\n  function collectFees(\n    address from,\n    address to,\n    uint256 amount\n  ) private returns (uint256) {\n    if (!isSwappingFees && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\n      uint256 fees;\n      if (automatedMarketMakerPairs[from]) {\n        fees = (amount * buyTotalFees) / 10000;\n        buyFeesCollected += fees;\n      } else if (automatedMarketMakerPairs[to]) {\n        fees = (amount * sellTotalFees) / 10000;\n        sellFeesCollected += fees;\n      }\n\n      amount = amount - fees;\n      super._transfer(from, address(this), fees);\n    }\n    return amount;\n  }\n\n  function swapFeesIfAmountIsReached(address from, address to) private {\n    uint256 contractTokenBalance = balanceOf(address(this));\n\n    if (\n      contractTokenBalance >= swapTokensAtAmount &&\n      !isSwappingFees &&\n      !automatedMarketMakerPairs[from] && // do not swap fees on buys\n      from != liquidityWallet &&\n      to != liquidityWallet\n    ) {\n      isSwappingFees = true;\n\n      buyFeesCollected = (contractTokenBalance / (buyFeesCollected + sellFeesCollected)) * buyFeesCollected;\n      sellFeesCollected = contractTokenBalance - buyFeesCollected;\n\n      uint256 marketingTokens = (buyFeesCollected * buyMarketingFee) / buyTotalFees;\n      marketingTokens += (sellFeesCollected * sellMarketingFee) / sellTotalFees;\n      if (marketingTokens > 0) swapAndSendToFeeMarketing(marketingTokens);\n\n      uint256 swapTokens = (buyFeesCollected * buyLiquidityFee) / buyTotalFees;\n      swapTokens = (sellFeesCollected * sellLiquidityFee) / sellTotalFees;\n      if (swapTokens > 0) swapAndLiquify(swapTokens);\n\n      uint256 sellTokens = balanceOf(address(this));\n      if (sellTokens > 0) swapAndSendDividends(sellTokens);\n\n      buyFeesCollected = 0;\n      sellFeesCollected = 0;\n\n      isSwappingFees = false;\n    }\n  }\n\n  function swapAndSendToFeeMarketing(uint256 tokens) private {\n    uint256 initialBNBBalance = address(this).balance;\n    swapTokensForEth(tokens);\n    uint256 newBNBBalance = address(this).balance - initialBNBBalance;\n    payable(marketingWallet).transfer(newBNBBalance);\n  }\n\n  function swapAndLiquify(uint256 tokens) private {\n    // split the contract balance into halves\n    uint256 half = tokens / 2;\n    uint256 otherHalf = tokens - half;\n\n    // capture the contract's current BNB balance.\n    // this is so that we can capture exactly the amount of BNB that the\n    // swap creates, and not make the liquidity event include any BNB that\n    // has been manually sent to the contract\n    uint256 initialBalance = address(this).balance;\n\n    // swap tokens for BNB\n    swapTokensForEth(half); // <- this breaks the BNB -> F4H swap when swap+liquify is triggered\n\n    // how much BNB did we just swap into?\n    uint256 newBalance = address(this).balance - initialBalance;\n\n    // add liquidity to pancakeswap\n    addLiquidity(otherHalf, newBalance);\n\n    emit SwapAndLiquify(half, newBalance, otherHalf);\n  }\n\n  function swapTokensForEth(uint256 tokenAmount) private {\n    // generate the uniswap pair path of token -> weth\n    address[] memory path = new address[](2);\n    path[0] = address(this);\n    path[1] = defaultDexRouter.WETH();\n\n    _approve(address(this), address(defaultDexRouter), tokenAmount);\n\n    // make the swap\n    defaultDexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n      tokenAmount,\n      0, // accept any amount of BNB\n      path,\n      address(this),\n      block.timestamp\n    );\n  }\n\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n    // approve token transfer to cover all possible scenarios\n    _approve(address(this), address(defaultDexRouter), tokenAmount);\n\n    // add the liquidity\n    defaultDexRouter.addLiquidityETH{value: ethAmount}(\n      address(this),\n      tokenAmount,\n      0, // slippage is unavoidable\n      0, // slippage is unavoidable\n      liquidityWallet,\n      block.timestamp\n    );\n  }\n\n  function swapAndSendDividends(uint256 tokens) private {\n    swapTokensForDividendToken(tokens, address(this));\n    uint256 dividends = IERC20(dividendToken).balanceOf(address(this));\n    bool success = IERC20(dividendToken).transfer(address(dividendTracker), dividends);\n\n    if (success) {\n      dividendTracker.distributeDividends(dividends);\n      emit SendDividends(tokens, dividends);\n    }\n  }\n\n  function swapTokensForDividendToken(uint256 tokenAmount, address recipient) private {\n    // generate the pancake pair path of weth -> Dividend token\n    address[] memory path = new address[](3);\n    path[0] = address(this);\n    path[1] = defaultDexRouter.WETH();\n    path[2] = dividendToken;\n\n    _approve(address(this), address(defaultDexRouter), tokenAmount);\n\n    // make the swap\n    defaultDexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n      tokenAmount,\n      0, // accept any amount of dividendToken\n      path,\n      recipient,\n      block.timestamp\n    );\n  }\n\n  modifier onlyBridge() {\n    require(msg.sender == bridge, \"Only bridge can perform this action\");\n    _;\n  }\n\n  function setBridge(address _bridge) external onlyOwner {\n    require(_bridge != address(0), \"Zero Address\");\n    require(bridge != _bridge, \"Same Bridge!\");\n    bridge = _bridge;\n\n    emit LogSetBridge(msg.sender, bridge);\n  }\n\n  /**\n   * @dev need approval from account\n   */\n  function lock(address account, uint256 amount) external onlyBridge {\n    require(account != address(0), \"Zero address\");\n    require(amount > 0, \"Lock amount must be greater than zero\");\n    require(amount <= balanceOf(account), \"Insufficient funds\");\n    require(super.allowance(account, _msgSender()) >= amount, \"ERC20: transfer amount exceeds allowance\");\n\n    super.transferFrom(account, bridgeVault, amount);\n\n    emit LogLockByBridge(account, amount);\n  }\n\n  /**\n   * @dev no need approval, because bridgeVault balance is controlled by EMPIRE\n   */\n  function unlock(address account, uint256 amount) external onlyBridge {\n    require(account != address(0), \"Zero address\");\n    require(amount > 0, \"Unlock amount must be greater than zero\");\n    require(amount <= balanceOf(bridgeVault), \"Insufficient funds\");\n\n    super.transferFrom(bridgeVault, account, amount);\n\n    emit LogUnlockByBridge(account, amount);\n  }\n}\n"
    },
    "contracts/mock/fight/token/ERC1363/ERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./IERC1363.sol\";\nimport \"./IERC1363Receiver.sol\";\nimport \"./IERC1363Spender.sol\";\n\n/**\n * @title ERC1363\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of an ERC1363 interface\n */\nabstract contract ERC1363 is ERC165, ERC20, IERC1363 {\n    using Address for address;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\n     * @param recipient The address to transfer to.\n     * @param amount The amount to be transferred.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferAndCall(address recipient, uint256 amount) public virtual override returns (bool) {\n        return transferAndCall(recipient, amount, \"\");\n    }\n\n    /**\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\n     * @param recipient The address to transfer to\n     * @param amount The amount to be transferred\n     * @param data Additional data with no specified format\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferAndCall(\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        transfer(recipient, amount);\n        require(_checkAndCallTransfer(_msgSender(), recipient, amount, data), \"ERC1363: _checkAndCallTransfer reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\n     * @param sender The address which you want to send tokens from\n     * @param recipient The address which you want to transfer to\n     * @param amount The amount of tokens to be transferred\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        return transferFromAndCall(sender, recipient, amount, \"\");\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\n     * @param sender The address which you want to send tokens from\n     * @param recipient The address which you want to transfer to\n     * @param amount The amount of tokens to be transferred\n     * @param data Additional data with no specified format\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        transferFrom(sender, recipient, amount);\n        require(_checkAndCallTransfer(sender, recipient, amount, data), \"ERC1363: _checkAndCallTransfer reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\n     * @param spender The address allowed to transfer to\n     * @param amount The amount allowed to be transferred\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function approveAndCall(address spender, uint256 amount) public virtual override returns (bool) {\n        return approveAndCall(spender, amount, \"\");\n    }\n\n    /**\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\n     * @param spender The address allowed to transfer to.\n     * @param amount The amount allowed to be transferred.\n     * @param data Additional data with no specified format.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        approve(spender, amount);\n        require(_checkAndCallApprove(spender, amount, data), \"ERC1363: _checkAndCallApprove reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Internal function to invoke `onTransferReceived` on a target address\n     *  The call is not executed if the target address is not a contract\n     * @param sender address Representing the previous owner of the given token value\n     * @param recipient address Target address that will receive the tokens\n     * @param amount uint256 The amount mount of tokens to be transferred\n     * @param data bytes Optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkAndCallTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual returns (bool) {\n        if (!recipient.isContract()) {\n            return false;\n        }\n        bytes4 retval = IERC1363Receiver(recipient).onTransferReceived(_msgSender(), sender, amount, data);\n        return (retval == IERC1363Receiver(recipient).onTransferReceived.selector);\n    }\n\n    /**\n     * @dev Internal function to invoke `onApprovalReceived` on a target address\n     *  The call is not executed if the target address is not a contract\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkAndCallApprove(\n        address spender,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual returns (bool) {\n        if (!spender.isContract()) {\n            return false;\n        }\n        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(_msgSender(), amount, data);\n        return (retval == IERC1363Spender(spender).onApprovalReceived.selector);\n    }\n}\n"
    },
    "contracts/mock/fight/interfaces/IDEXFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDEXFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/mock/fight/interfaces/IDEXPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDEXPair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/mock/fight/token/ERC1363/IERC1363Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363Receiver Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n *  from ERC1363 token contracts as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363Receiver {\n    /**\n     * @notice Handle the receipt of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n     * transfer. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param sender address The address which are token transferred from\n     * @param amount uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))` unless throwing\n     */\n    function onTransferReceived(\n        address operator,\n        address sender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/mock/fight/token/ERC1363/IERC1363Spender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363Spender Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support approveAndCall\n *  from ERC1363 token contracts as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363Spender {\n    /**\n     * @notice Handle the approval of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after an `approve`. This function MAY throw to revert and reject the\n     * approval. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param sender address The address which called `approveAndCall` function\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))` unless throwing\n     */\n    function onApprovalReceived(\n        address sender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/mock/TNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\ncontract TESTNFT is ERC721, Ownable {\r\n  using Counters for Counters.Counter;\r\n\r\n  Counters.Counter private _tokenIdCounter;\r\n\r\n  constructor() ERC721(\"TEST NFT\", \"TNFT\") {}\r\n\r\n  function _baseURI() internal pure override returns (string memory) {\r\n    return \"https://roburna.com\";\r\n  }\r\n\r\n  function safeMint(address to) public onlyOwner {\r\n    uint256 tokenId = _tokenIdCounter.current();\r\n    _tokenIdCounter.increment();\r\n    _safeMint(to, tokenId);\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": ["abi", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "metadata"],
        "": ["ast"]
      }
    }
  }
}
